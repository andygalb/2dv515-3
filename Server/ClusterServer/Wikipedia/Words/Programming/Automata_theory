automata theory classes of automata clicking on each layer will take you to an article on that subject the study of the mathematical properties of such automata is automata theory the picture is a visualization of an automaton that recognizes strings containing an even number of 0s the automaton starts in state s1 and transitions to the nonaccepting state s2 upon reading the symbol 0 reading another 0 causes the automaton to transition back to the accepting state s1 in both states the symbol 1 is ignored by making a transition to the current stateautomata theory is the study of abstract machines and automata as well as the computational problems that can be solved using them it is a theory in theoretical computer science and discrete mathematics a subject of study in both mathematics and computer science the word automata the plural of automaton comes from the greek word which means selfacting the figure at right illustrates a finitestate machine which belongs to a wellknown type of automaton this automaton consists of states represented in the figure by circles and transitions represented by arrows as the automaton sees a symbol of input it makes a transition or jump to another state according to its transition function which takes the current state and the recent symbol as its inputs automata theory is closely related to formal language theory an automaton is a finite representation of a formal language that may be an infinite set automata are often classified by the class of formal languages they can recognize typically illustrated by the chomsky hierarchy which describes the relations between various languages and kinds of formalized logic automata play a major role in theory of computation compiler construction artificial intelligence parsing and formal verification automata following is an introductory definition of one type of automaton which attempts to help one grasp the essential concepts involved in automata theorytheories very informal description an automaton is a construct made of states designed to determine if the input should be accepted or rejected it looks a lot like a basic board game where each space on the board represents a state each state has information about what to do when an input is received by the machine again rather like what to do when you land on the jail spot in a popular board game as the machine receives a new input it looks at the state and picks a new spot based on the information on what to do when it receives that input at that state when there are no more inputs the automaton stops and the space it is on when it completes determines whether the automaton accepts or rejects that particular set of inputs informal description an automaton runs when it is given some sequence of inputs in discrete individual time steps or steps an automaton processes one input picked from a set of symbols or letters which is called an alphabet the symbols received by the automaton as input at any step are a finite sequence of symbols called words an automaton has a finite set of states at each moment during a run of the automaton the automaton is in one of its states when the automaton receives new input it moves to another state or transitions based on a function that takes the current state and symbol as parameters this function is called the transition function the automaton reads the symbols of the input word one after another and transitions from state to state according to the transition function until the word is read completely once the input word has been read the automaton is said to have stopped the state at which the automaton stops is called the final state depending on the final state its said that the automaton either accepts or rejects an input word there is a subset of states of the automaton which is defined as the set of accepting states if the final state is an accepting state then the automaton accepts the word otherwise the word is rejected the set of all the words accepted by an automaton is called the language of that automaton any subset of the language of an automaton is a language recognized by that automaton in short an automaton is a mathematical object that takes a word as input and decides whether to accept it or reject it since all computational problems are reducible into the acceptreject question on inputs all problem instances can be represented in a finite length of symbols automata theory plays a crucial role in computational theory formal definition automaton definition of finite state automata a deterministic finite automaton is represented formally by a 5tuple q q0f where q is a finite set of states is a finite set of symbols called the alphabet of the automaton is the transition function that is qq q0 is the start state that is the state of the automaton before any input has been processed where q0 q f is a set of states of q ie fq called accept states input word an automaton reads a finite string of symbols a1a2 an where ai which is called an input word the set of all words is denoted by run a sequence of states q0q1q2 qn where qiq such that q0 is the start state and qiqi1ai for 0in is a run of the automaton on an input word w a1a2 an in other words at first the automaton is at the start state q0 and then the automaton reads symbols of the input word in sequence when the automaton reads symbol ai it jumps to state qiqi1ai qn is said to be the final state of the run accepting word a word w is accepted by the automaton if qnf recognized language an automaton can recognize a formal language the language l recognized by an automaton is the set of all the words that are accepted by the automaton recognizable languages the recognizable languages are the set of languages that are recognized by some automaton for the above definition of automata the recognizable languages are regular languages for different definitions of automata the recognizable languages are different variant definitions of automata automata are defined to study useful machines under mathematical formalism so the definition of an automaton is open to variations according to the real world machine which we want to model using the automaton people have studied many variations of automata the most standard variant which is described above is called a deterministic finite automaton the following are some popular variations in the definition of different components of automata input finite input an automaton that accepts only finite sequence of symbols the above introductory definition only encompasses finite words infinite input an automaton that accepts infinite words words such automata are called automata tree word input the input may be a tree of symbols instead of sequence of symbols in this case after reading each symbol the automaton reads all the successor symbols in the input tree it is said that the automaton makes one copy of itself for each successor and each such copy starts running on one of the successor symbols from the state according to the transition relation of the automaton such an automaton is called a tree automaton infinite tree input the two extensions above can be combined so the automaton reads a tree structure with infinite branches such an automaton is called an infinite tree automaton states finite states an automaton that contains only a finite number of states the above introductory definition describes automata with finite numbers of states infinite states an automaton that may not have a finite number of states or even a countable number of states for example the quantum finite automaton or topological automaton has uncountable infinity of states stack memory an automaton may also contain some extra memory in the form of a stack in which symbols can be pushed and popped this kind of automaton is called a pushdown automaton transition function deterministic for a given current state and an input symbol if an automaton can only jump to one and only one state then it is a deterministic automaton nondeterministic an automaton that after reading an input symbol may jump into any of a number of states as licensed by its transition relation notice that the term transition function is replaced by transition relation the automaton nondeterministically decides to jump into one of the allowed choices such automata are called nondeterministic automata alternation this idea is quite similar to tree automaton but orthogonal the automaton may run its multiple copies on the same next read symbol such automata are called alternating automata acceptance condition must satisfy all runs of such copies to accept the input acceptance condition acceptance of finite words same as described in the informal definition above acceptance of infinite words an omega automaton cannot have final states as infinite words never terminate rather acceptance of the word is decided by looking at the infinite sequence of visited states during the run probabilistic acceptance an automaton need not strictly accept or reject an input it may accept the input with some probability between zero and one for example quantum finite automaton geometric automaton and metric automaton have probabilistic acceptance different combinations of the above variations produce many classes of automaton automata theory is a subject matter that studies properties of various types of automata for example the following questions are studied about a given type of automata which class of formal languages is recognizable by some type of automata recognizable languages are certain automata closed under union intersection or complementation of formal languages closure properties how expressive is a type of automata in terms of recognizing a class of formal languages and their relative expressive power language hierarchy automata theory also studies the existence or nonexistence of any effective algorithms to solve problems similar to the following list does an automaton accept any input word emptiness checking is it possible to transform a given nondeterministic automaton into deterministic automaton without changing the recognizable language determinization for a given formal language what is the smallest automaton that recognizes it minimization classes of automata the following is an incomplete list of types of automata automaton recognizable language nondeterministicdeterministic finite state machine fsm regular languages deterministic pushdown automaton dpda deterministic contextfree languages pushdown automaton pda contextfree languages linear bounded automaton lba contextsensitive languages turing machine recursively enumerable languages deterministic bchi automaton limit languages nondeterministic bchi automaton regular languages rabin automaton streett automaton parity automaton muller automaton regular languages discrete continuous and hybrid automata normally automata theory describes the states of abstract machines but there are analog automata or continuous automata or hybrid discretecontinuous automata which use analog data continuous time or both hierarchy in terms of powers the following is an incomplete hierarchy in terms of powers of different types of virtual machines the hierarchy reflects the nested categories of languages the machines are able to accept automaton deterministic finite automaton dfa lowest power same power displaystyle same power nondeterministic finite automaton nfa above is weaker displaystyle cap below is stronger deterministic push down automaton dpdai with 1 pushdown store displaystyle cap nondeterministic push down automaton npdai with 1 pushdown store displaystyle cap linear bounded automaton lba displaystyle cap deterministic push down automaton dpdaii with 2 pushdown stores displaystyle nondeterministic push down automaton npdaii with 2 pushdown stores displaystyle deterministic turing machine dtm displaystyle nondeterministic turing machine ntm displaystyle probabilistic turing machine ptm displaystyle multitape turing machine mtm displaystyle multidimensional turing machine applications each model in automata theory plays important roles in several applied areas finite automata are used in text processing compilers and hardware design contextfree grammar cfgs are used in programming languages and artificial intelligence originally cfgs were used in the study of the human languages cellular automata are used in the field of biology the most common example being john conways game of life some other examples which could be explained using automata theory in biology include mollusk and pine cones growth and pigmentation patterns going further a theory suggesting that the whole universe is computed by some sort of a discrete automaton is advocated by some scientists the idea originated in the work of konrad zuse and was popularized in america by edward fredkin automata also appear in the theory of finite fields the set of irreducible polynomials which can be written as composition of degree two polynomials is in fact a regular language automata simulators automata simulators are pedagogical tools used to teach learn and research automata theory an automata simulator takes as input the description of an automaton and then simulates its working for an arbitrary input string the description of the automaton can be entered in several ways an automaton can be defined in a symbolic language or its specification may be entered in a predesigned form or its transition diagram may be drawn by clicking and dragging the mouse well known automata simulators include turings world jflap vas tags and simstudio connection to category theory one can define several distinct categories of automata it has both categorical limits and colimits an automata homomorphism maps a quintuple of an automaton ai onto the quintuple of another automaton aj categories of variable automata one could also define a variable automaton in the sense of norbert wiener in his book on the human use of human beings via the endomorphisms a i a i displaystyle aito ai then one can show that such variable automata homomorphisms form a mathematical group in the case of nondeterministic or other complex kinds of automata the latter set of endomorphisms may become however a variable automaton groupoid therefore in the most general case categories of variable automata of any kind are categories of groupoids or groupoid categories moreover the category of reversible automata is then a 2category and also a subcategory of the 2category of groupoids or the groupoid category boolean differential calculus john e hopcroft rajeev motwani jeffrey d ullman 2000 introduction to automata theory languages and computation 2nd edition pearson education isbn0201441241cs1 maint uses authors parameter link michael sipser 1997 introduction to the theory of computation pws publishing isbn053494728x part one automata and languages chapters 12 pp29122 section 41 decidable languages pp152159 section 51 undecidable problems from language theory pp172183 elaine rich 2008 automata computability and complexity theory and applications pearson isbn0132288060 salomaa arto 1985 computation and automata encyclopedia of mathematics and its applications 25 cambridge university press isbn0521302455 zbl056568046 anderson james a 2006 automata theory with modern applications with contributions by tom head cambridge cambridge university press isbn0521613248 zbl112768049 conway jh 1971 regular algebra and finite machines chapman and hall mathematics series london chapman hall zbl023194041 sakarovitch jacques 2009 elements of automata theory translated from the french by reuben thomas cambridge university press isbn9780521844253 zbl118868177 james p schmeiser david t barnard 1995 producing a topdown parse order with bottomup parsing elsevier northhollandcs1 maint uses authors parameter link igor aleksander fkeith hanna 1975 automata theory an engineering approach new york crane russak isbn0844806579cs1 maint uses authors parameter link marvin minsky 1967 computation finite and infinite machines princeton nj prentice hall john c martin 2011 introduction to languages and the theory of computation new york ny 10020 mcgraw hill isbn0073191469 visual automata simulator a tool for simulating visualizing and transforming finite state automata and turing machines by jean bovet jflap dkbricsautomaton libfa vteautomata theory formal languages and formal grammarschomsky hierarchygrammarslanguagesabstract machines type0 type1 type2 type3 unrestricted no common name contextsensitive positive range concatenation indexed linear contextfree rewriting systems treeadjoining contextfree deterministic contextfree visibly pushdown regular nonrecursive recursively enumerable decidable contextsensitive positive range concatenation indexed linear contextfree rewriting language treeadjoining contextfree deterministic contextfree visibly pushdown regular starfree finite turing machine decider linearbounded ptime turing machine nested stack thread automaton restricted tree stack automaton embedded pushdown nondeterministic pushdown deterministic pushdown visibly pushdown finite counterfree with aperiodic finite monoid acyclic finite each category of languages except those marked by a is a proper subset of the category directly above it any language in each category is generated by a grammar and by an automaton in the category in the same line vtemajor fields of computer sciencenote this template roughly follows the 2012 acm computing classification systemhardware printed circuit board peripheral integrated circuit very large scale integration systems on chip socs energy consumption green computing electronic design automation hardware acceleration computer systemsorganization computer architecture embedded system realtime computing dependability networks network architecture network protocol network components network scheduler network performance evaluation network service software organization interpreter middleware virtual machine operating system software quality software notationsand tools programming paradigm programming language compiler domainspecific language modeling language software framework integrated development environment software configuration management software library software repository software development software development process requirements analysis software design software construction software deployment software maintenance programming team opensource model theory of computation model of computation formal language automata theory computational complexity theory logic semantics algorithms algorithm design analysis of algorithms algorithmic efficiency randomized algorithm computational geometry mathematicsof computing discrete mathematics probability statistics mathematical software information theory mathematical analysis numerical analysis informationsystems database management system information storage systems enterprise information system social information systems geographic information system decision support system process control system multimedia information system data mining digital library computing platform digital marketing world wide web information retrieval security cryptography formal methods security services intrusion detection system hardware security network security information security application security humancomputerinteraction interaction design social computing ubiquitous computing visualization accessibility concurrency concurrent computing parallel computing distributed computing multithreading multiprocessing artificialintelligence natural language processing knowledge representation and reasoning computer vision automated planning and scheduling search methodology control method philosophy of artificial intelligence distributed artificial intelligence machine learning supervised learning unsupervised learning reinforcement learning multitask learning crossvalidation graphics animation rendering image manipulation graphics processing unit mixed reality virtual reality image compression solid modeling appliedcomputing ecommerce enterprise software computational mathematics computational physics computational chemistry computational biology computational social science computational engineering computational healthcare digital art electronic publishing cyberwarfare electronic voting video games word processing operations research educational technology document management book category portal wikiproject commons authority control bnf cb119395737 data gnd 40039535 lccn sh85079341 ndl 00568995 