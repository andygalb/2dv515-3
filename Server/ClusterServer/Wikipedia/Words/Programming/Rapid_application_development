rapid application development rad tool and rapid application development tool redirect here for development tools focused on making graphical user interfaces see graphical user interface builder software development core activities processes requirements design engineering construction testing debugging deployment maintenance paradigms and models agile cleanroom incremental prototyping spiral v model waterfall methodologies and frameworks asd devops dad dsdm fdd iid kanban lean sd less mdd msf psp rad rup safe scrum semat tsp up xp supporting disciplines configuration management documentation software quality assurance sqa project management user experience practices atdd bdd cco ci cd ddd pp standup tdd tools compiler debugger profiler gui designer modeling ide build automation release automation infrastructure as code testing standards and bodies of knowledge babok cmmi ieee standards iso 9001 isoiec standards pmbok swebok itil glossaries artificial intelligence computer science electrical and electronics engineering vte rapidapplication development rad is both a general term used to refer to adaptive software development approaches as well as the name for james martins approach to rapid development in general rad approaches to software development put less emphasis on planning and more emphasis on an adaptive process prototypes are often used in addition to or sometimes even in place of design specifications rad is especially well suited for although not limited to developing software that is driven by user interface requirements graphical user interface builders are often called rapid application development tools other approaches to rapid development include the adaptive agile spiral and unified models history rapid application development was a response to plandriven waterfall processes developed in the 1970s and 1980s such as the structured systems analysis and design method ssadm one of the problems with these methods is that they were based on a traditional engineering model used to design and build things like bridges and buildings software is an inherently different kind of artifact software can radically change the entire process used to solve a problem as a result knowledge gained from the development process itself can feed back to the requirements and design of the solution plandriven approaches attempt to rigidly define the requirements the solution and the plan to implement it and have a process that discourage changes rad approaches on the other hand recognize that software development is a knowledge intensive process and provide flexible processes that help take advantage of knowledge gained during the project to improve or adapt the solution the first such rad alternative was developed by barry boehm and was known as the spiral model boehm and other subsequent rad approaches emphasized developing prototypes as well as or instead of rigorous design specifications prototypes had several advantages over traditional specifications risk reduction a prototype could test some of the most difficult potential parts of the system early on in the lifecycle this can provide valuable information as to the feasibility of a design and can prevent the team from pursuing solutions that turn out to be too complex or time consuming to implement this benefit of finding problems earlier in the lifecycle rather than later was a key benefit of the rad approach the earlier a problem can be found the cheaper it is to address users are better at using and reacting than at creating specifications in the waterfall model it was common for a user to sign off on a set of requirements but then when presented with an implemented system to suddenly realize that a given design lacked some critical features or was too complex in general most users give much more useful feedback when they can experience a prototype of the running system rather than abstractly define what that system should be prototypes can be usable and can evolve into the completed product one approach used in some rad methods was to build the system as a series of prototypes that evolve from minimal functionality to moderately useful to the final completed system the advantage of this besides the two advantages above was that the users could get useful business functionality much earlier in the process starting with the ideas of barry boehm and others james martin developed the rapid application development approach during the 1980s at ibm and finally formalized it by publishing a book in 1991 rapid application development this has resulted in some confusion over the term rad even among it professionals it is important to distinguish between rad as a general alternative to the waterfall model and rad as the specific method created by martin the martin method was tailored toward knowledge intensive and ui intensive business systems these ideas were further developed and improved upon by rad pioneers like james kerr and richard hunter who together wrote the seminal book on the subject inside rad which followed the journey of a rad project manager as he drove and refined the rad methodology in realtime on an actual rad project these practitioners and those like them helped rad gain popularity as an alternative to traditional systems project life cycle approaches the rad approach also matured during the period of peak interest in business reengineering the idea of business process reengineering was to radically rethink core business processes such as sales and customer support with the new capabilities of information technology in mind rad was often an essential part of larger business re engineering programs the rapid prototyping approach of rad was a key tool to help users and analysts think out of the box about innovative ways that technology might radically reinvent a core business process the james martin rad method phases in the james martin approach to rad the james martin approach to rad divides the process into four distinct phases requirements planning phase combines elements of the system planning and systems analysis phases of the systems development life cycle sdlc users managers and it staff members discuss and agree on business needs project scope constraints and system requirements it ends when the team agrees on the key issues and obtains management authorization to continue user design phase during this phase users interact with systems analysts and develop models and prototypes that represent all system processes inputs and outputs the rad groups or subgroups typically use a combination of joint application development jad techniques and case tools to translate user needs into working models user design is a continuous interactive process that allows users to understand modify and eventually approve a working model of the system that meets their needs construction phase focuses on program and application development task similar to the sdlc in rad however users continue to participate and can still suggest changes or improvements as actual screens or reports are developed its tasks are programming and application development coding unitintegration and system testing cutover phase resembles the final tasks in the sdlc implementation phase including data conversion testing changeover to the new system and user training compared with traditional methods the entire process is compressed as a result the new system is built delivered and placed in operation much sooner pros and cons of rapid application development in modern information technology environments many systems are now built using some degree of rapid application development not necessarily the james martin approach in addition to martins method agile methods and the rational unified process are often used for rad development the advantages of rad include better quality by having users interact with evolving prototypes the business functionality from a rad project can often be much higher than that achieved via a waterfall model the software can be more usable and has a better chance to focus on business problems that are critical to end users rather than technical problems of interest to developers risk control although much of the literature on rad focuses on speed and user involvement a critical feature of rad done correctly is risk mitigation its worth remembering that boehm initially characterized the spiral model as a risk based approach a rad approach can focus in early on the key risk factors and adjust to them based on empirical evidence collected in the early part of the process eg the complexity of prototyping some of the most complex parts of the system more projects completed on time and within budget by focusing on the development of incremental units the chances for catastrophic failures that have dogged large waterfall projects is reduced in the waterfall model it was common to come to a realization after six months or more of analysis and development that required a radical rethinking of the entire system with rad this kind of information can be discovered and acted upon earlier in the process the disadvantages of rad include the risk of a new approach for most it shops rad was a new approach that required experienced professionals to rethink the way they worked humans are virtually always averse to change and any project undertaken with new tools or methods will be more likely to fail the first time simply due to the requirement for the team to learn requires time of scarce resources one thing virtually all approaches to rad have in common is that there is much more interaction throughout the entire lifecycle between users and developers in the waterfall model users would define requirements and then mostly go away as developers created the system in rad users are involved from the beginning and through virtually the entire project this requires that the business is willing to invest the time of application domain experts the paradox is that the better the expert the more they are familiar with their domain the more they are required to actually run the business and it may be difficult to convince their supervisors to invest their time without such commitments rad projects will not succeed less control one of the advantages of rad is that it provides a flexible adaptable process the ideal is to be able to adapt quickly to both problems and opportunities there is an inevitable tradeoff between flexibility and control more of one means less of the other if a project eg lifecritical software values control more than agility rad is not appropriate poor design the focus on prototypes can be taken too far in some cases resulting in a hack and test methodology where developers are constantly making minor changes to individual components and ignoring system architecture issues that could result in a better overall design this can especially be an issue for methodologies such as martins that focus so heavily on the user interface of the system lack of scalability rad typically focuses on small to mediumsized project teams the other issues cited above less design and control present special challenges when using a rad approach for very large scale systems steve mcconnell 1996 rapid development taming wild software schedules microsoft press books isbn9781556159008 kerr james m hunter richard 1993 inside rad how to build a fully functional system in 90 days or less mcgrawhill isbn0070342237 ellen gottesdiener 1995 rad realities beyond the hype to how rad really works application development trends ken schwaber 1996 agile project management with scrum microsoft press books isbn9780735619937 steve mcconnell 2003 professional software development shorter schedules higher quality products more successful projects enhanced careers addisonwesley isbn9780321193674 dean leffingwell 2007 scaling software agility best practices for large enterprises addisonwesley professional isbn9780321458193 scott stiner 2016 forbes list rapid application development rad a smart quick and vaulable process for software develpers vtesoftware engineeringfields computer programming requirements engineering software deployment software design software maintenance software testing systems analysis formal methods concepts data modeling enterprise architecture functional specification modeling language orthogonality programming paradigm software software archaeology software architecture software configuration management software development methodology software development process software quality software quality assurance software verification and validation structured analysis orientations agile aspectoriented object orientation ontology service orientation sdlc modelsdevelopmental agile eup executable uml incremental model iterative model prototype model rad up scrum spiral model vmodel waterfall model xp other spice cmmi data model er model function model information model metamodeling object model systems model view model languages idef uml usl sysml softwareengineers victor basili kent beck grady booch fred brooks barry boehm peter chen danese cooper ward cunningham tom demarco edsger w dijkstra delores m etter martin fowler adele goldstine margaret hamilton c a r hoare lois haibt mary jean harrold grace hopper watts humphrey michael a jackson ivar jacobson alan kay nancy leveson stephen j mellor bertrand meyer david parnas trygve reenskaug winston w royce james rumbaugh mary shaw peri tarr elaine weyuker niklaus wirth edward yourdon related fields computer science computer engineering project management risk management systems engineering category commons vtemajor fields of computer sciencenote this template roughly follows the 2012 acm computing classification systemhardware printed circuit board peripheral integrated circuit very large scale integration systems on chip socs energy consumption green computing electronic design automation hardware acceleration computer systemsorganization computer architecture embedded system realtime computing dependability networks network architecture network protocol network components network scheduler network performance evaluation network service software organization interpreter middleware virtual machine operating system software quality software notationsand tools programming paradigm programming language compiler domainspecific language modeling language software framework integrated development environment software configuration management software library software repository software development software development process requirements analysis software design software construction software deployment software maintenance programming team opensource model theory of computation model of computation formal language automata theory computational complexity theory logic semantics algorithms algorithm design analysis of algorithms algorithmic efficiency randomized algorithm computational geometry mathematicsof computing discrete mathematics probability statistics mathematical software information theory mathematical analysis numerical analysis informationsystems database management system information storage systems enterprise information system social information systems geographic information system decision support system process control system multimedia information system data mining digital library computing platform digital marketing world wide web information retrieval security cryptography formal methods security services intrusion detection system hardware security network security information security application security humancomputerinteraction interaction design social computing ubiquitous computing visualization accessibility concurrency concurrent computing parallel computing distributed computing multithreading multiprocessing artificialintelligence natural language processing knowledge representation and reasoning computer vision automated planning and scheduling search methodology control method philosophy of artificial intelligence distributed artificial intelligence machine learning supervised learning unsupervised learning reinforcement learning multitask learning crossvalidation graphics animation rendering image manipulation graphics processing unit mixed reality virtual reality image compression solid modeling appliedcomputing ecommerce enterprise software computational mathematics computational physics computational chemistry computational biology computational social science computational engineering computational healthcare digital art electronic publishing cyberwarfare electronic voting video games word processing operations research educational technology document management book category portal wikiproject commons 