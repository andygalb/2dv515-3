software framework framework computer science redirects here for other uses see framework disambiguation in computer programming a software framework is an abstraction in which software providing generic functionality can be selectively changed by additional userwritten code thus providing applicationspecific software a software framework provides a standard way to build and deploy applications a software framework is a universal reusable software environment that provides particular functionality as part of a larger software platform to facilitate development of software applications products and solutions software frameworks may include support programs compilers code libraries tool sets and application programming interfaces apis that bring together all the different components to enable development of a project or system frameworks have key distinguishing features that separate them from normal libraries inversion of control in a framework unlike in libraries or in standard user applications the overall programs flow of control is not dictated by the caller but by the framework extensibility a user can extend the framework usually by selective overriding or programmers can add specialized user code to provide specific functionality nonmodifiable framework code the framework code in general is not supposed to be modified while accepting userimplemented extensions in other words users can extend the framework but should not modify its code rationale the designers of software frameworks aim to facilitate software developments by allowing designers and programmers to devote their time to meeting software requirements rather than dealing with the more standard lowlevel details of providing a working system thereby reducing overall development time for example a team using a web framework to develop a banking website can focus on writing code particular to banking rather than the mechanics of request handling and state management frameworks often add to the size of programs a phenomenon termed code bloat due to customerdemand driven applications needs both competing and complementary frameworks sometimes end up in a product further due to the complexity of their apis the intended reduction in overall development time may not be achieved due to the need to spend additional time learning to use the framework this criticism is clearly valid when a special or new framework is first encountered by development staff if such a framework is not used in subsequent job taskings the time invested in learning the framework can cost more than purposewritten code familiar to the projects staff many programmers keep copies of useful boilerplate for common needs however once a framework is learned future projects can be faster and easier to complete the concept of a framework is to make a onesizefitsall solution set and with familiarity code production should logically rise there are no such claims made about the size of the code eventually bundled with the output product nor its relative efficiency and conciseness using any library solution necessarily pulls in extras and unused extraneous assets unless the software is a compilerobject linker making a tight small wholly controlled and specified executable module the issue continues but a decadeplus of industry experience has shown that the most effective frameworks turn out to be those that evolve from refactoring the common code of the enterprise instead of using a generic onesizefitsall framework developed by third parties for general purposes an example of that would be how the user interface in such an application package as an office suite grows to have common look feel and datasharing attributes and methods as the once disparate bundled applications grow unified into a suite which is tighter and smaller the newerevolved suite can be a product that shares integral utility libraries and user interfaces this trend in the controversy brings up an important issue about frameworks creating a framework that is elegant versus one that merely solves a problem is still an art rather than a science software elegance implies clarity conciseness and little waste extra or extraneous functionality much of which is user defined for those frameworks that generate code for example elegance would imply the creation of code that is clean and comprehensible to a reasonably knowledgeable programmer and which is therefore readily modifiable versus one that merely generates correct code the elegance issue is why relatively few software frameworks have stood the test of time the best frameworks have been able to evolve gracefully as the underlying technology on which they were built advanced even there having evolved many such packages will retain legacy capabilities bloating the final software as otherwise replaced methods have been retained in parallel with the newer methods examples software frameworks typically contain considerable housekeeping and utility code in order to help bootstrap user applications but generally focus on specific problem domains such as artistic drawing music composition and mechanical cad financial modeling applications earth system modeling applications decision support systems media playback and authoring ajax framework javascript framework web framework middleware cactus framework high performance scientific computing application framework general gui applications enterprise architecture framework oracle application development framework opencv a computer vision development framework architecture according to pree software frameworks consist of frozen spots and hot spots frozen spots define the overall architecture of a software system that is to say its basic components and the relationships between them these remain unchanged frozen in any instantiation of the application framework hot spots represent those parts where the programmers using the framework add their own code to add the functionality specific to their own project in an objectoriented environment a framework consists of abstract and concrete classes instantiation of such a framework consists of composing and subclassing the existing classes when developing a concrete software system with a software framework developers utilize the hot spots according to the specific needs and requirements of the system software frameworks rely on the hollywood principle dont call us well call you this means that the userdefined classes for example new subclasses receive messages from the predefined framework classes developers usually handle this by implementing superclass abstract methods class computer science design pattern computer science dont repeat yourself implicit invocation wikimedia commons has media related to software frameworks software frameworks resistance isnt futile approach to software framework design applying patterns and frameworks to develop objectoriented communication software authority control bnf cb11991188g data gnd 44646859 lccn sh2013002773 