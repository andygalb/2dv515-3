v the vmodel of the systems engineering process software development core activities processes requirements design engineering construction testing debugging deployment maintenance paradigms and models agile cleanroom incremental prototyping spiral v model waterfall methodologies and frameworks asd devops dad dsdm fdd iid kanban lean sd less mdd msf psp rad rup safe scrum semat tsp up xp supporting disciplines configuration management documentation software quality assurance sqa project management user experience practices atdd bdd cco ci cd ddd pp standup tdd tools compiler debugger profiler gui designer modeling ide build automation release automation infrastructure as code testing standards and bodies of knowledge babok cmmi ieee standards iso 9001 isoiec standards pmbok swebok itil glossaries artificial intelligence computer science electrical and electronics engineering vte in software development the vmodel represents a development process that may be considered an extension of the waterfall model and is an example of the more general vmodel instead of moving down in a linear way the process steps are bent upwards after the coding phase to form the typical v shape the vmodel demonstrates the relationships between each phase of the development life cycle and its associated phase of testing the horizontal and vertical axes represents time or project completeness lefttoright and level of abstraction coarsestgrain abstraction uppermost respectively verification phases requirements analysis in the requirements analysis phase the first step in the verification process the requirements of the system are collected by analyzing the needs of the users this phase is concerned with establishing what the ideal system has to perform however it does not determine how the software will be designed or built usually the users are interviewed and a document called the user requirements document is generated the user requirements document will typically describe the systems functional interface performance data security etc requirements as expected by the user it is used by business analysts to communicate their understanding of the system to the users the users carefully review this document as this document would serve as the guideline for the system designers in the system design phase the user acceptance tests are designed in this phase see also functional requirements there are different methods for gathering requirements of both soft and hard methodologies including interviews questionnaires document analysis observation throwaway prototypes use case and static and dynamic views with users system design systems design is the phase where system engineers analyze and understand the business of the proposed system by studying the user requirements document they figure out possibilities and techniques by which the user requirements can be implemented if any of the requirements are not feasible the user is informed of the issue a resolution is found and the user requirement document is edited accordingly the software specification document which serves as a blueprint for the development phase is generated this document contains the general system organization menu structures data structures etc it may also hold example business scenarios sample windows reports for the better understanding other technical documentation like entity diagrams data dictionary will also be produced in this phase the documents for system testing are prepared architecture design the phase of the design of computer architecture and software architecture can also be referred to as highlevel design the baseline in selecting the architecture is that it should realize all which typically consists of the list of modules brief functionality of each module their interface relationships dependencies database tables architecture diagrams technology details etc the integration testing design is carried out in the particular phase module design the module design phase can also be referred to as lowlevel design the designed system is broken up into smaller units or modules and each of them is explained so that the programmer can start coding directly the low level design document or program specifications will contain a detailed functional logic of the module in pseudocode database tables with all elements including their type and size all interface details with complete api references all dependency issues error message listings complete input and outputs for a module the unit test design is developed in this stage validation phases in the vmodel each stage of verification phase has a corresponding stage in the validation phase the following are the typical phases of validation in the vmodel though they may be known by other names unit testing in the vmodel unit test plans utps are developed during module design phase these utps are executed to eliminate bugs at code level or unit level a unit is the smallest entity which can independently exist eg a program module unit testing verifies that the smallest entity can function correctly when isolated from the rest of the codesunits integration testing integration test plans are developed during the architectural design phase these tests verify that units created and tested independently can coexist and communicate among themselves test results are shared with customers team system testing system tests plans are developed during system design phase unlike unit and integration test plans system test plans are composed by clients business team system test ensures that expectations from application developed are met the whole application is tested for its functionality interdependency and communication system testing verifies that functional and nonfunctional requirements have been met load and performance testing stress testing regression testing etc are subsets of system testing user acceptance testing user acceptance test uat plans are developed during the requirements analysis phase test plans are composed by business users uat is performed in a user environment that resembles the production environment using realistic data uat verifies that delivered system meets users requirement and system is ready for use in real time criticism the vmodel has been criticized by agile advocates and others as an inadequate model of software development for numerous reasons criticisms include it is too simple to accurately reflect the software development process and can lead managers into a false sense of security the vmodel reflects a project management view of software development and fits the needs of project managers accountants and lawyers rather than software developers or users although it is easily understood by novices that early understanding is useful only if the novice goes on to acquire a deeper understanding of the development process and how the vmodel must be adapted and extended in practice if practitioners persist with their naive view of the vmodel they will have great difficulty applying it successfully it is inflexible and encourages a rigid and linear view of software development and has no inherent ability to respond to change it provides only a slight variant on the waterfall model and is therefore subject to the same criticisms as that model it provides greater emphasis on testing and particularly the importance of early test planning however a common practical criticism of the vmodel is that it leads to testing being squeezed into tight windows at the end of development when earlier stages have overrun but the implementation date remains fixed it is consistent with and therefore implicitly encourages inefficient and ineffective approaches to testing it implicitly promotes writing test scripts in advance rather than exploratory testing it encourages testers to look for what they expect to find rather than discover what is truly there it also encourages a rigid link between the equivalent levels of either leg eg user acceptance test plans being derived from user requirements documents rather than encouraging testers to select the most effective and efficient way to plan and execute testing it lacks coherence and precision there is widespread confusion about what exactly the vmodel is if one boils it down to those elements that most people would agree upon it becomes a trite and unhelpful representation of software development disagreement about the merits of the vmodel often reflects a lack of shared understanding of its definition current state supporters of the vmodel argue that it has evolved over time and supports flexibility and agility throughout the development process software testing portal product lifecycle management systems development life cycle roger s pressmansoftware engineering a practitioners approach the mcgrawhill companies isbn007301933x mark hoffman ted beaumont application development managing the project life cycle mc press isbn1883884454 boris beizer software testing techniques second edition international thomson computer press 1990 isbn1850328803 wikimedia commons has media related to vmodels a paper by christian bucanac the sdlc and sixsigma sdlc for small and medium db applications vtesoftware engineeringfields computer programming requirements engineering software deployment software design software maintenance software testing systems analysis formal methods concepts data modeling enterprise architecture functional specification modeling language orthogonality programming paradigm software software archaeology software architecture software configuration management software development methodology software development process software quality software quality assurance software verification and validation structured analysis orientations agile aspectoriented object orientation ontology service orientation sdlc modelsdevelopmental agile eup executable uml incremental model iterative model prototype model rad up scrum spiral model vmodel waterfall model xp other spice cmmi data model er model function model information model metamodeling object model systems model view model languages idef uml usl sysml softwareengineers victor basili kent beck grady booch fred brooks barry boehm peter chen danese cooper ward cunningham tom demarco edsger w dijkstra delores m etter martin fowler adele goldstine margaret hamilton c a r hoare lois haibt mary jean harrold grace hopper watts humphrey michael a jackson ivar jacobson alan kay nancy leveson stephen j mellor bertrand meyer david parnas trygve reenskaug winston w royce james rumbaugh mary shaw peri tarr elaine weyuker niklaus wirth edward yourdon related fields computer science computer engineering project management risk management systems engineering category commons 