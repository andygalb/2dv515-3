edsger w. dijkstra edsger wybe dijkstra dakstr dutch a theoretical physicist by training he worked as a programmer at the mathematisch centrum amsterdam from 1952 to 1962 a university professor for much of his life dijkstra held the schlumberger centennial chair in computer sciences at the university of texas at austin from 1984 until his retirement in 1999 he was a professor of mathematics at the eindhoven university of technology 19621984 and a research fellow at the burroughs corporation 19731984 one of the most influential figures of computing sciences founding generation dijkstra helped shape the new discipline from both an engineering and a theoretical perspective as a foremost opponent of the mechanizing view of computing science he refuted the use of the concepts of computer science and software engineering as umbrella terms for academic disciplines until the mid1960s computer programming was considered more an art or a craft than a scientific discipline in harlan millss words 1986 programming the academic study of concurrent computing started in the 1960s with dijkstra 1965 credited with being the first paper in this field identifying and solving the mutual exclusion problem as the prize sponsored jointly by the acm symposium on principles of distributed computing podc and the eatcs international symposium on distributed computing disc recognizes that no other individual has had a larger influence on research in principles of distributed computing biography early years edsger w dijkstra was born in rotterdam his father was a chemist who was president of the dutch chemical society he taught chemistry at a secondary school and was later its superintendent his mother was a mathematician but never had a formal job dijkstra had considered a career in law and had hoped to represent the netherlands in the united nations however after graduating from school in 1948 at his parents suggestion he studied mathematics and physics and then theoretical physics at the university of leiden in the early 1950s electronic computers were a novelty dijkstra stumbled on his career quite by accident and through his supervisor professor a haantjes he met adriaan van wijngaarden the director of the computation department at the mathematical center in amsterdam who offered dijkstra a job he officially became the netherlands first programmer in march 1952 for some time dijkstra remained committed to physics working on it in leiden three days out of each week with increasing exposure to computing however his focus began to shift as he recalled mwparseroutput templatequoteoverflowhiddenmargin1em 0padding0 40pxmwparseroutput templatequote templatequotecitelineheight15emtextalignleftpaddingleft16emmargintop0after having programmed for some three years i had a discussion with a van wijngaarden who was then my boss at the mathematical center in amsterdam a discussion for which i shall remain grateful to him as long as i live the point was that i was supposed to study theoretical physics at the university of leiden simultaneously and as i found the two activities harder and harder to combine i had to make up my mind either to stop programming and become a real respectable theoretical physicist or to carry my study of physics to a formal completion only with a minimum of effort and to become yes what a programmer but was that a respectable profession for after all what was programming where was the sound body of knowledge that could support it as an intellectually respectable discipline i remember quite vividly how i envied my hardware colleagues who when asked about their professional competence could at least point out that they knew everything about vacuum tubes amplifiers and the rest whereas i felt that when faced with that question i would stand emptyhanded full of misgivings i knocked on van wijngaardens office door asking him whether i could speak to him for a moment when i left his office a number of hours later i was another person for after having listened to my problems patiently he agreed that up till that moment there was not much of a programming discipline but then he went on to explain quietly that automatic computers were here to stay that we were just at the beginning and could not i be one of the persons called to make programming a respectable discipline in the years to come this was a turning point in my life and i completed my study of physics formally as quickly as i couldedsger dijkstra the humble programmer ewd340 communications of the acm when dijkstra married maria ria c debets in 1957 he was required as a part of the marriage rites to state his profession he stated that he was a programmer which was unacceptable to the authorities there being no such profession at that time in the netherlands in 1959 he received his phd from the university of amsterdam for a thesis entitled communication with an automatic computer devoted to a description of the assembly language designed for the first commercial computer developed in the netherlands the x1 his thesis supervisor was van wijngaarden mathematisch centrum amsterdam from 1952 until 1962 dijkstra worked at the mathematisch centrum in amsterdam dijkstra formulated and solved the shortest path problem for a demonstration at the official inauguration of the armac computer in 1956 butbecause of the absence of journals dedicated to automatic computingdid not publish the result until 1959 at the mathematical center dijkstra and his colleague jaap zonneveld eindhoven university of technology the eindhoven university of technology located in eindhoven in the south of the netherlands where dijkstra was a professor of mathematics from 1962 to 1984 in 1962 dijkstra moved to eindhoven and later to nuenen in the south of the netherlands where he became a professor in the mathematics department at the eindhoven university of technology burroughs corporation dijkstra joined burroughs corporation a company known at that time for the production of computers based on an innovative hardware architecture as its research fellow in august 1973 his duties consisted of visiting some of the companys research centers a few times a year and carrying on his own research which he did in the smallest burroughs research facility namely his study on the second floor of his house in nuenen in fact dijkstra was the only research fellow of burroughs corporation and worked for it from home occasionally travelling to its branches in the united states as a result he reduced his appointment at the university to one day a week that day tuesday soon became known as the day of the famous tuesday afternoon club a seminar during which he discussed with his colleagues scientific articles looking at all aspects notation organisation presentation language content etc shortly after he moved in 1984 to the university of texas at austin usa a new branch of the tuesday afternoon club emerged in austin the burroughs years saw him at his most prolific in output of research articles he wrote nearly 500 documents in the ewd series described below most of them technical reports for private circulation within a select group the university of texas at austin the university of texas at austin where dijkstra held the schlumberger centennial chair in computer sciences from 1984 until 1999 dijkstra accepted the schlumberger centennial chair in the computer science department at the university of texas at austin in 1984 last years dijkstra worked in austin until his retirement in november 1999 to mark the occasion and to celebrate his fortyplus years of seminal contributions to computing science the department of computer sciences organized a symposium which took place on his 70th birthday in may 2000 dijkstra and his wife returned from austin to his original house in nuenen netherlands where he found that he had only months to live he said that he wanted to retire in austin texas but to die in the netherlands dijkstra died on 6 august 2002 after a long struggle with cancer he and his wife maria ria debets were survived by their three children marcus femke and the computer scientist rutger m dijkstra scientific contributions and impacts programming paradigms action agentoriented arrayoriented automatabased concurrent computing relativistic programming datadriven declarative contrast imperative functional functional logic purely functional logic abductive logic answer set concurrent logic functional logic inductive logic constraint constraint logic concurrent constraint logic dataflow flowbased reactive dynamicscripting eventdriven functionlevel contrast valuelevel pointfree style concatenative generic imperative contrast declarative procedural objectoriented literate languageoriented naturallanguage programming disciplinespecific domainspecific grammaroriented intentional metaprogramming automatic inductive programming reflective attributeoriented macro template nonstructured contrast structured array nondeterministic parallel computing processoriented probabilistic stackbased structured contrast nonstructured blockstructured objectoriented actorbased classbased concurrent prototypebased by separation of concerns aspectoriented roleoriented subjectoriented recursive symbolic valuelevel contrast functionlevel quantum programming vte as an early theoretical pioneer in many research areas of computing science dijkstra helped shape the new discipline from both an engineering and an academic perspective many of his papers are the source of new research areas many concepts that are now standard in computer science were first identified by dijkstra andor bear names coined by him several important problems were also first formulated and solved by him a 1994 survey of over a thousand professors of computer science was conducted to obtain a list of 38 most influential scholarly papers in the field and dijkstra is the author of five papers during his fortyplus years as a computing scientist which included positions in both academia and industry dijkstra made numerous seminal contributions to many areas of computing science including compiler construction operating systems concurrent programming concurrent computing distributed programming distributed computing programming paradigm and methodology programming language research program design program development program verification software engineering principles algorithm design and philosophical foundations of computer programming and computer science in addition dijkstra was intensely interested in teaching computer science and in the relationships between academic computing science and the software industry algorithmic work dijkstras algorithm it picks the unvisited vertex with the lowestdistance calculates the distance through it to each unvisited neighbor and updates the neighbors distance if smaller mark visited set to red when done with neighbors dijkstras algorithmic work especially graph algorithms concurrent algorithms and distributed algorithms plays an important role in many areas of computing science according to leslie lamport 2002 dijkstra started the field of concurrent and distributed algorithms with his 1965 cacm paper solution of a problem in concurrent programming control in which he first stated and solved the mutual exclusion problem as lamport explains that paper is probably why podc exists it remains to this day the most influential paper in the field that it did not win a podc influential paper award reflects an artificial separation between concurrent and distributed algorithmsa separation that has never existed in dijkstras work in 1959 dijkstra published in a 3page article a note on two problems in connexion with graphs the algorithm to find the shortest path in a graph between any two given nodes now called dijkstras algorithm its impact over the next 40 years is summarised from the article of mikkel thorup undirected single source shortest paths with positive integer weights in linear time 1999 since 1959 all theoretical developments in sssp what is the shortest way to travel from rotterdam to groningen in general from given city to given city it is the algorithm for the shortest path which i designed in about twenty minutes one morning i was shopping in amsterdam with my young fiance and tired we sat down on the caf terrace to drink a cup of coffee and i was just thinking about whether i could do this and i then designed the algorithm for the shortest path as i said it was a twentyminute invention in fact it was published in 59 three years late the publication is still readable it is in fact quite nice one of the reasons that it is so nice was that i designed it without pencil and paper i learned later that one of the advantages of designing without pencil and paper is that you are almost forced to avoid all avoidable complexities eventually that algorithm became to my great amazement one of the cornerstones of my fameedsger dijkstra in an interview with philip l frana communications of the acm 53 8 2001 a year later he came across another problem from hardware engineers working on the institutes next computer minimize the amount of wire needed to connect the pins on the back panel of the machine as a solution he rediscovered the algorithm known as prims minimal spanning tree algorithm the prims algorithm was originally developed in 1930 by czech mathematician vojtch jarnk in 1961 dijkstra first described the shuntingyard algorithm a method for parsing mathematical expressions specified in infix notation in the mathematisch centrum report it can be used to produce output in reverse polish notation rpn or as an abstract syntax tree ast the algorithm was named the shunting yard algorithm because its operation resembles that of a railroad shunting yard the shuntingyard algorithm is commonly used to implement operatorprecedence parsers in 1962 or 1963 dijkstra proposed the semaphore mechanism for mutual exclusion algorithm for n processes a generalization of dekkers algorithm which was probably the first published concurrent algorithm and which introduced a new area of algorithmic research he also identified the deadlock problem and proposed the bankers algorithm that prevents deadlock in 1974 dijkstra presented three selfstabilizing algorithms for mutual exclusion on a ring dijkstras work is considered to be the first to introduce and demonstrate the selfstabilization concept in the mid1970s dijkstra together with other authors introduced two useful abstractions mutator and collector to the study of garbage collection the mutator abstracts the process that performs the computation including allocation of a new storage cell the collector is the process that automatically reclaims garbage furthermore this paper gives a formalization of tricolor marking that is basic to incremental garbage collection in the early 1980s dijkstra and carel s scholten proposed the dijkstrascholten algorithm for detecting termination in distributed systems in 1981 dijkstra developed smoothsort a comparisonbased sorting algorithm and a variation of heapsort compiler construction and programming language research by august 1960 dijkstra and his colleague zonneveld had completed the implementation of the first algol 60 compiler for the electrologica x1 computer dijkstra was known to be a fan of algol 60 and worked on the team that implemented the first compiler for that language he was closely involved in the algol 60 development realisation and popularisation as discussed by peter naur in the article the european side of the last phase of the development of algol 60 in the proceedings of the first acm sigplan conference on history of programming languages january 1978 dijkstra took part in the period 19581959 in a number of meetings that culminated in the publication of the report defining the algol 60 language dijkstras name does not appear in the list of 13 authors of the final report apparently he eventually left the committee because he could not agree with the majority opinions still while at the mathematisch centrum amsterdam he wrote jointly with jaap zonneveld the first algol 60 compiler dijkstra and zonneveld who collaborated on the compiler agreed not to shave until the project was completed while zonneveld shaved shortly thereafter dijkstra kept his beard for the rest of his life algol was the result of a collaboration of american and european committees algol 60 short for algorithmic language 1960 is a member of the algol family of computer programming languages it followed on from algol 58 and inspired many languages that followed it it gave rise to many other programming languages including bcpl b pascal simula and c employing a novel method to do so dijkstras short book primer of algol 60 programming originally published in 1962 was the standard reference for the language for several years programming paradigm and methodology computer programming in the 1950s to 1960s was not recognized as an academic discipline and unlike mature sciences there were no theoretical concepts or coding systems programming as a professional activity was poorly understood in those years in the late 1960s computer programming was in state of crisis software crisis is a term used in the early days of computing science for the difficulty of writing useful and efficient computer programs in the required time the software crisis was due to the rapid increases in computer power and the complexity of the problems that could be tackled with the increase in the complexity of the software many software problems arose because existing methods were neither sufficient nor up to the mark the term software crisis was coined by some attendees at the first nato software engineering conference in 1968 at garmisch germany while dijkstra had programmed extensively in machine code in the 1950s he came to the conclusion that in highlevel languages frequent use of the goto statement was usually symptomatic of poor structure in 1968 he wrote a private paper a case against the go to statement editor niklaus wirth gave this letter the heading go to statement considered harmful which introduced the phrase considered harmful into computing dijkstra argued that the programming statement goto found in many highlevel programming languages is a major source of errors and should therefore be eliminated this letter caused a huge debate in the programming community some went to the length of equating good programming with the elimination of go to dijkstra refused to mention the debate or even the go to statement in his article notes on structured programming the debate has long since died down programming languages provide alternatives to the go to few programmers today use it liberally and most never use it at all dijkstras thesis was that departures from linear control flow were clearer if allowed only in disciplined higherlevel structures such as the ifthenelse statement and the while loop this methodology was developed into structured programming movement the title of his 1972 book coauthored with car hoare and olejohan dahl considered by many as the first significant movement in history of computer programming structured programming became the new programming orthodoxy during the 1970s structured programming is often regarded as gotoless programming but as bertrand meyer notes as the first book on the topic in his article structured programming retrospect and prospect 1986 harlan mills writes edsger w dijkstras 1969 structured programming article precipitated a decade of intense focus on programming techniques that has fundamentally altered human expectations and achievements in software development before this decade of intense focus programming was regarded as a private puzzlesolving activity of writing computer instructions to work as a program after this decade programming could be regarded as a public mathematicsbased activity of restructuring specifications into programs before the challenge was in getting programs to run at all and then in getting them further debugged to do the right things after programs could be expected to both run and do the right things with little or no debugging before it was common wisdom that no sizable program could be errorfree after many sizable programs have run a year or more with no errors detected these expectations and achievements are not universal because of the inertia of industrial practices but they are wellenough established to herald fundamental change in software development the book concise encyclopedia of computer science 2004 edited by edwin d reilly notes that the major contributions of structured programming have been twofoldthe elevation of programming technique to something less of an art and more of a science and the demonstration that carefully structured programs can be creative works of sufficient literary merit to deserve being read by humans and not just by computer program design and development software engineering research dijkstras ideas about programming methodology especially the structured programming movement helped lay the foundations for the birth and development of the professional discipline of software engineering in particular the software design and development enabling programmers to organize and manage increasingly complex software projects in the late 1960s dijkstra discussed the concept of program families and in the mid 1970s david parnas and others clarified the idea and showed how to apply it in software engineering principles the rise of the structured programming movement led to many other structured approaches applied to software design the techniques of structured analysis and structured design are outgrowths of structured programming concepts and techniques and of the early ideas about modular design principles of modularity were strengthened by larry constantines concepts of coupling to be minimized between modules and cohesion to be maximized within modules by david parnass techniques of information hiding and by abstract data types a number of tools and methods employing structured concepts were developed such as structured design jacksons structured programming ross structured analysis and design technique sadt yourdons structured method structured systems analysis and design method ssadm and james martins information technology engineering the field of software metrics is often considered as a direct influence of the structured programming movement on software engineering in the 1970s separation of concerns soc one of the basic principles in software engineering is a design principle for separating a computer program into distinct sections such that each section addresses a separate concern the term separation of concerns was coined by dijkstra in his 1974 paper on the role of scientific thought operating system research in the 1960s dijkstra and his colleagues in eindhoven designed and implemented the standing for technische hogeschool eindhoven operating system which was organised into clearly identified layers dijkstra organized the design of the system in layers in order to reduce the overall complexity of the software though the term architecture had not yet been used to describe software design this was certainly considered the first glimpse of software architecture concurrent computing and programming a semaphore dutch seinpaal the term used in dijkstras original description in the early 1960s dijkstra proposed the first synchronisation mechanism for concurrent processes the semaphore with its two operations p and v in a onepage paper from 1965 dijkstra introduced the mutual exclusion problem for n processes and discussed a solution to it it was probably the first published concurrent algorithm a simple example of two processes modifying a linked list at the same time causing a conflict the requirement of mutual exclusion was first identified and solved by dijkstra in his seminal 1965 paper titled solution of a problem in concurrent programming control and is credited as the first topic in the study of concurrent algorithms in 1968 dijkstra published his seminal paper cooperating sequential processes a 70page essay that originated the field of concurrent programming he discussed in it the notion of mutual exclusion mutex and the criteria a satisfactory solution should satisfy he also redressed the historical perspective left out of his 1965 paper by including the first known correct solution to the mutual exclusion problem for two processes due to theodorus dekker dijkstra subsequently generalized dekkers solution to n processes and proposed an elegant bankers algorithm that prevents deadlock the deadlock detection and prevention became perennial research problems in the field of concurrent programming illustration of the dining philosophers problem the dining philosophers problem is an example problem often used in concurrent algorithm design to illustrate synchronization issues and techniques for resolving them it was originally formulated in 1965 by dijkstra as a student exam exercise presented in terms of computers competing for access to tape drive peripherals soon after tony hoare gave the problem its present formulation the sleeping barber problem is also attributed to dijkstra in his book concurrent programming algorithms principles and foundations michel raynal writes since the early work of ew dijkstra 1965 who introduced the mutual exclusion problem the concept of a process the semaphore object the notion of a weakest precondition and guarded commands among many other contributions synchronization is no longer a catalog of tricks but a domain of computing science with its own concepts mechanisms and techniques whose results can be applied in many domains this means that process synchronization has to be a major topic of any computer science curriculum john w mccormick et al 2011 notes the notion of the concurrent program as a means for writing parallel programs without regard for the underlying hardware was first introduced by edsger dijkstra 1968 moti benari 1982 elegantly summed up dijkstras idea in three sentences concurrent programming is the name given to programming notation and techniques for expressing potential parallelism and solving the resulting synchronization and communication problems implementation of parallelism is a topic in computer systems hardware and software that is essentially independent of concurrent programming concurrent programming is important because it provides an abstract setting in which to study parallelism without getting bogged down in the implementation details distributed computing dijkstra was one of the very early pioneers of the research on principles of distributed computing in particular his paper selfstabilizing systems in spite of distributed control 1974 started the subfield of selfstabilization it is also considered as the first scientific examination of faulttolerant systems formal specification and verification from the 1970s dijkstras chief interest was formal verification in 1976 dijkstra published a seminal book a discipline of programming which put forward his method of systematic development of programs together with their correctness proofs in his exposition he used his guarded command language the language with its reliance on nondeterminism the adopted weakest precondition semantics and the proposed development method has had a considerable impact on the field to this day the refinement calculus originally proposed by ralphjohan back in 1984 to add further support to this approach to programming he published jointly with wim feijen an introductory textbook for firstyear students of computer science the book first published in dutch was entitled een methode van programmeren the english edition appeared in 1988 as a method of programming on the nature of computer science and computer programming many of his opinions on computer science and programming have become widespread for example the programming phrase two or more use a for a rule of thumb when to use a loop is sometimes attributed to him he was the first to make the claim that programming is so inherently complex that in order to manage it successfully programmers need to harness every trick and abstraction possible dijkstra was one of the most famous opponents of the engineering view of computing science like peter naur and kristen nygaard dijkstra disliked the very term computer science computer science as dijkstra pointed out deserves a better name he suggests it can be called computing science instead of the computer or computing technology dijkstra wanted to emphasize the abstract mechanisms that computing science uses to master complexity when expressing the abstract nature of computing science he wrote a confusion of even longer standing came from the fact that the unprepared included the electronic engineers that were supposed to design build and maintain the machines the job was actually beyond the electronic technology of the day and as a result the question of how to get and keep the physical equipment more or less in working condition became in the early days the alloverriding concern as a result the topic became primarily in the usa prematurely known as computer science which actually is like referring to surgery as knife science and it was firmly implanted in peoples minds that computing science is about machines and their peripheral equipment quod non in the humble programmer 1972 dijkstra wrote we must not forget that it is not our business to make programs it is our business to design classes of computations that will display a desired behaviour dijkstra also opposed the inclusion of software engineering under the umbrella of academic computer science he wrote that as economics is known as the miserable science software engineering should be known as the doomed discipline doomed because it cannot even approach its goal since its goal is selfcontradictory and software engineering has accepted as its charter how to program if you cannot personality and working style dijkstra at the blackboard during a conference at eth zurich in 1994 you can hardly blame mit for not taking notice of an obscure computer scientist in a small town in the netherlands dijkstra used to describe himself in nuenen in the mid1960s in the world of computing science dijkstra is well known as a character in the preface of his book a discipline of programming 1976 he stated the following for the absence of a bibliography i offer neither explanation nor apology in fact most of his articles and books have no references at all this approach to references was deplored by some researchers but dijkstra chose this way of working to preserve his selfreliance as a university professor for much of his life dijkstra saw teaching not just as a required activity but as a serious research endeavor he was also highly original in his way of assessing peoples capacity for a job when vladimir lifschitz came to austin in 1990 for a job interview dijkstra gave him a puzzle vladimir solved it and has been working in austin since then despite having invented much of the technology of software dijkstra eschewed the use of computers in his own work for many decades even after he succumbed to his ut colleagues encouragement and acquired a macintosh computer he used it only for email and for browsing the world wide web dijkstras favorite writing instrument was the montblanc meisterstck fountain pen he repeatedly tried other pens but none ever displaced the montblanc he had no use for word processors believing that one should be able to write a letter or article without rough drafts rewriting or any significant editing he would work it all out in his head before putting pen to paper and once mentioned that when he was a physics student he would solve his homework problems in his head while walking the streets of leiden most of dijkstras publications were written by him alone he never had a secretary and took care of all his correspondence alone throughout dijkstras career his work was characterized by elegance and economy dijkstra was famous for his wit eloquence and way with words such as in his remark the question of whether machines can think is about as relevant as the question of whether submarines can swim in many of his more humorous essays dijkstra described a fictional company of which he served as chairman the company was called mathematics inc a company that he imagined having commercialized the production of mathematical theorems in the same way that software companies had commercialized the production of computer programs he invented a number of activities and challenges of mathematics inc and documented them in several papers in the ewd series the imaginary company had produced a proof of the riemann hypothesis but then had great difficulties collecting royalties from mathematicians who had proved results assuming the riemann hypothesis the proof itself was a trade secret ewd manuscripts dijkstra was well known for his habit of carefully composing manuscripts with his fountain pen the manuscripts are called ewds since dijkstra numbered them with ewd his initials as a prefix according to dijkstra himself the ewds started when he moved from the mathematical centre in amsterdam to the eindhoven university of technology then technische hogeschool eindhoven after going to eindhoven dijkstra experienced a writers block for more than a year dijkstra distributed photocopies of a new ewd among his colleagues many recipients photocopied and forwarded their copies so the ewds spread throughout the international computer science community the topics were computer science and mathematics and included trip reports letters and speeches these short articles span a period of 40 years almost all ewds appearing after 1972 were handwritten they are rarely longer than 15 pages and are consecutively numbered the last one no 1318 is from 14 april 2002 within computer science they are known as the ewd reports or simply the ewds more than 1300 ewds have been scanned with a growing number transcribed to facilitate search and are available online at the dijkstra archive of the university of texas personal life dijkstras selfconfidence went together with a remarkably modest lifestyle to the point of being spartan death dijkstra died on 6 august 2002 according to officials at the university of texas the cause of death was cancer influence and recognition the difference between a computer programmer and a computer scientist is a jobtitle thing edsger dijkstra wants proudly to be called a computer programmer although he hasnt touched a computer now for some years his great strength is that he is uncompromising it would make him physically ill to think of programming in c donald knuth 1996 an interview with donald knuth by jack woehr of dr dobbs journal in 1972 the association for computing machinery acm acknowledged dijkstras seminal contributions to the field by awarding him the distinguished turing award the citation for the award reads edsger dijkstra was a principal contributor in the late 1950s to the development of the algol a high level programming language which has become a model of clarity and mathematical rigor he is one of the principal exponents of the science and art of programming languages in general and has greatly contributed to our understanding of their structure representation and implementation his fifteen years of publications extend from theoretical articles on graph theory to basic manuals expository texts and philosophical contemplations in the field of programming languages the introduction given at the awards ceremony is a tribute to dijkstra the working vocabulary of programmers everywhere is studded with words originated or forcefully promulgated by ew dijkstra display deadly embrace semaphore gotoless programming structured programming but his influence on programming is more pervasive than any glossary can possibly indicate the precious gift that this turing award acknowledges is dijkstras style his approach to programming as a high intellectual challenge his eloquent insistence and practical demonstration that programs should be composed correctly not just debugged into correctness and his illuminating perception of problems at the foundations of program design we have come to value good programs in much the same way as we value good literature and at the center of this movement creating and reflecting patterns no less beautiful than useful stands ew dijkstra in the words of sir tony hoare frs delivered by him at dijkstras funeral edsger is widely recognized as a man who has thought deeply about many deep questions and among the deepest questions is that of traditional moral philosophy how is it that a person should live their life edsger found his answer to this question early in his life he decided he would live as an academic scientist conducting research into a new branch of science the science of computing he would lay the foundations that would establish computing as a rigorous scientific discipline and in his research and in his teaching and in his writing he would pursue perfection to the exclusion of all other concerns from these commitments he never deviated and that is how he has made to his chosen subject of study the greatest contribution that any one person could make in any one lifetime in march 2003 the following email was sent to the distributed computing community this is to announce that the award formerly known as the podc influentialpaper award has been renamed the edsger w dijkstra prize in distributed computing after the late edsger w dijkstra a pioneer in the area of distributed computing his foundational work on concurrency primitives such as the semaphore concurrency problems such as mutual exclusion and deadlock reasoning about concurrent systems and selfstabilization comprises one of the most important supports upon which the field of distributed computing is built no other individual has had a larger influence on research in principles of distributed computing former acm president peter j denning wrote about dijkstra edsger dijkstra one of the giants of our field and a passionate believer in the mathematical view of programs and programming over the previous quartercentury he had formulated many of the great intellectual challenges of the field as programmingthe goto statement structured programming concurrent processes semaphores deadlocks recursive programming in algol and deriving correct programs awards and honors among dijkstras awards and honors are member of the royal netherlands academy of arts and sciences 1971 distinguished fellow of the british computer society 1971 the association for computing machinerys am turing award 1972 harry h goode memorial award from the ieee computer society 1974 foreign honorary member of the american academy of arts and sciences 1975 doctor of science honoris causa from the queens university belfast 1976 computer pioneer charter recipient from the ieee computer society 1982 acmsigcse award for outstanding contributions to computer science education 1989 fellow of the association for computing machinery 1994 honorary doctorate from the athens university of economics business greece 2001 the distinguished fellowship of the british computer society bcs is awarded under bylaw 7 of the bcss royal charter the award was first approved in 1969 and the first election was made in 1971 to dijkstra on the occasion of dijkstras 60th birthday in 1990 the department of computer science utcs at the university of texas at austin organized a twoday seminar in his honor speakers came from all over the united states and europe and a group of computer scientists contributed research articles which were edited into a book in 2002 the cc foundation of japan recognized dijkstra for his pioneering contributions to the establishment of the scientific basis for computer software through creative research in basic software theory algorithm theory structured programming and semaphores dijkstra was alive to receive notice of the award but it was accepted by his family in an award ceremony after his death shortly before his death in 2002 dijkstra received the acm podc influentialpaper award in distributed computing for his work on selfstabilization of program computation this annual award was renamed the dijkstra prize edsger w dijkstra prize in distributed computing the following year in his honor the dijkstra award for outstanding academic achievement in computer science loyola university chicago department of computer science is named for edsger w dijkstra beginning in 2005 this award recognizes the top academic performance by a graduating computer science major selection is based on gpa in all major courses and election by department faculty the department of computer science utcs at the university of texas at austin hosted the inaugural edsger w dijkstra memorial lecture on 12 october 2010 tony hoare emeritus professor at oxford and principal researcher at microsoft research was the speaker for the event this lecture series was made possible by a generous grant from schlumberger to honor the memory of dijkstra dijkstras algorithm dining philosophers problem guarded command language predicate transformer semantics weakest precondition calculus semaphore smoothsort go to statement considered harmful on the cruelty of really teaching computer science list of pioneers in computer science list of important publications in computer science list of important publications in theoretical computer science list of important publications in concurrent parallel and distributed computing publications books mwparseroutput refbeginfontsize90marginbottom05emmwparseroutput refbeginhangingindentsulliststyletypenonemarginleft0mwparseroutput refbeginhangingindentsullimwparseroutput refbeginhangingindentsdlddmarginleft0paddingleft32emtextindent32emliststylenonemwparseroutput refbegin100fontsize100 1962 a primer of algol 60 programming together with report on the algorithmic language algol 60 academic press isbn0122162501mwparseroutput citecitationfontstyleinheritmwparseroutput qquotesmwparseroutput codecs1codecolorinheritbackgroundinheritborderinheritpaddinginheritmwparseroutput cs1lockfree abackgroundurluploadwikimediaorgwikipediacommonsthumb665lockgreensvg9pxlockgreensvgpngnorepeatbackgroundpositionright 1em centermwparseroutput cs1locklimited amwparseroutput cs1lockregistration abackgroundurluploadwikimediaorgwikipediacommonsthumbdd6lockgrayalt2svg9pxlockgrayalt2svgpngnorepeatbackgroundpositionright 1em centermwparseroutput cs1locksubscription abackgroundurluploadwikimediaorgwikipediacommonsthumbaaalockredalt2svg9pxlockredalt2svgpngnorepeatbackgroundpositionright 1em centermwparseroutput cs1subscriptionmwparseroutput cs1registrationcolor555mwparseroutput cs1subscription spanmwparseroutput cs1registration spanborderbottom1px dottedcursorhelpmwparseroutput cs1hiddenerrordisplaynonefontsize100mwparseroutput cs1visibleerrorfontsize100mwparseroutput cs1subscriptionmwparseroutput cs1registrationmwparseroutput cs1formatfontsize95mwparseroutput cs1kernleftmwparseroutput cs1kernwlleftpaddingleft02emmwparseroutput cs1kernrightmwparseroutput cs1kernwlrightpaddingright02em dahl olejohan hoare car 1972 structured programming academic press isbn0122005503 1976 a discipline of programming prentice hall isbn013215871x 1982 selected writings on computing a personal perspective monographs in computer science springer isbn0387906525 feijen whj sterringa joke 1988 a method of programming addisonwesley isbn0201175363 scholten carel s 1990 predicate calculus and program semantics texts and monographs in computer science springerverlag isbn0387969578 selected articles 1959 a note on two problems in connexion with graphs pdf numerische mathematik 23 3 269271 doi101007bf01386390 1962 some meditations on advanced programming proc ifip congress amsterdam northholland pp5358 1965 cooperating sequential processes technische hogeschool eindhoven reprinted in genuys f ed 1968 programming languages nato advanced summer school held in villarddelans in 1966 academic press pp43112 oclc499952053 1965 solution of a problem in concurrent programming control comm acm 8 9 569 doi101145365559365617 1965 programming considered as a human activity proc ifip congress pp2137 1968 go to statement considered harmful letters to the editor comm acm 11 3 1478 doi101145362929362947 1968 a constructive approach to the problem of program correctness bit numerical mathematics 8 174186 doi101007bf01933419 may 1968 the structure of the themultiprogramming system acm symp on operating systems comm acm 11 5 3416 doi101145363095363143 1971 a short introduction to the art of computer programming eindhoven technische hogeschool oclc3474242 ewd316 1971 hierarchical ordering of sequential processes acta inf 1 115138 doi101007bf00289519 1972 the humble programmer comm acm 15 10 859866 doi101145355604361591 notes on structured programming dijkstra dahl hoare 1972 junejuly 1974 programming as a discipline of mathematical nature american mathematical monthly 81 608612 doi1023072319209 jstor2319209 dijkstra edsger w 1974 on the role of scientific thought ewd447 ew dijkstra archive center for american history university of texas at austin 1974 selfstabilizing systems in spite of distributed control comm acm 17 11 6434 doi101145361179361202 1975 how do we tell truths that might hurt dijkstra 1982 pp129131 1975 craftsman or scientist acm pacific 1975 pp217223 dijkstra edsger w 1975 on the teaching of programming i e on the teaching of thinking language hierarchies and interfaces 1975 110 dijkstra edsger w 1977 programming from craft to scientific discipline international computing symposium 1977 2330 1978 on the interplay between mathematics and programming program construction pp3546 doi101007bfb001465 isbn9783540092513 dijkstra edsger w 1975 correctness concerns and among other things why they are resented acm proceedings of the international conference on reliable software 2123 april 1975 los angeles california usa pp546550 1975 guarded commands nondeterminacy and formal derivation of programs comm acm 18 8 4537 doi101145360933360975 1978 finding the correctness proof of a concurrent program program construction 1978 2434 dijkstra edsger w 1984 the threats to computing science ewd898 ew dijkstra archive center for american history university of texas at austin 1986 on a cultural gap the mathematical intelligencer 8 1 4852 doi101007bf03023921 1987 mathematicians and computing scientists the cultural gap abacus 4 4 2631 1989 on the cruelty of really teaching computer science a debate on teaching computing science comm acm 32 12 13981404 doi1011457638076381 1999 computing science achievements and challenges acm sigapp applied computing review 7 2 29 doi101145335527335528 2001 the end of computing science comm acm 44 3 92 doi101145365181365217 dijkstra edsger w 2001 what led to notes on structured programming ew dijkstra archive center for american history university of texas at austin apt krzysztof r 2002 edsger wybe dijkstra 19302002 a portrait of a genius formal aspects of computing 14 2 9298 arxivcs0210001 doi101007s001650200029 brinch hansen per 2002 the origin of concurrent programming from semaphores to remote procedure calls springer isbn9780387954011 benari m 2006 principles of concurrent and distributed programming 2nd ed addisonwesley isbn9780321312839 broy m denert ernst eds 2002 software pioneers contributions to software engineering springer p3 isbn9783540430810 chen peter p 2002 from gotoless to structured programming the legacy of edsger w dijkstra ieee software 19 5 21 doi101109ms20021032847 daylight edgar g 2012 the dawn of software engineering from turing to dijkstra lonely scholar isbn9789491386022 daylight edgar g 2011 dijkstras rallying cry for generalization the advent of the recursive procedure late 1950searly 1960s the computer journal 54 11 175672 doi101093comjnlbxr002 dolev shlomi 2000 selfstabilization mit press isbn9780262041782 feijen whj gries david eds 1990 beauty is our business a birthday salute to edsger w dijkstra springer isbn9780387972992 istrail sorin 2008 storytelling about lighthouses criticizing professor dijkstra considered harmless pdf conduit brown university department of computer science alumni magazine 17 2 istrail sorin 2010 storytelling about lighthouses when professor dijkstra slapped me in the quest for beautiful code pdf conduit brown university department of computer science alumni magazine 19 1 james mike 2013 edsger dijkstra the poetry of programming iprogrammerinfo lamport leslie june 2015 turing lecture the computer science of concurrency the early years comm acm 58 6 7176 doi1011452771951 laplante phillip a 1996 great papers in computer science ieee press isbn9780780311121 laplante phillip a 2008 great papers in computer science a retrospective pdf journal of scientific and practical computing 2 1 3135 lee jan 1991 frontiers of computing a tribute to edsger w dijkstra on the occasion of his 60th birthday pdf ann hist comp 13 1 9196 markoff john 2002 edsger dijkstra 72 physicist who shaped computer era the new york times milone lorenzo 2009 ew dijkstra una vita da informatico pdf mondo digitale 9 2 oregan gerard 2013 giants of computing a compendium of select pivotal pioneers springer isbn9781447153405 payette sandy 2014 hopper and dijkstra crisis revolution and the future of programming ieee annals of the history of computing 36 4 6473 doi101109mahc201454 shasha dennis lazere cathy 1998 out of their minds the lives and discoveries of 15 great computer scientists springer isbn9780387982694 wikimedia commons has media related to edsger wybe dijkstra wikiquote has quotations related to edsger w dijkstra ew dijkstra archive center for american history university of texas at austin dijkstras rallying cry for generalization a site devoted to dijkstras works and thoughts created and maintained by the historian of computing edgar graham daylight vteedsger dijkstranotable works a primer of algol 60 programming book structured programming book a discipline of programming book a method of programming book predicate calculus and program semantics book selected writings on computing a personal perspective book selected papers ewd manuscripts a note on two problems in connexion with graphs cooperating sequential processes solution of a problem in concurrent programming control the structure of the themultiprogramming system go to statement considered harmful notes on structured programming the humble programmer programming considered as a human activity how do we tell truths that might hurt on the role of scientific thought selfstabilizing systems in spite of distributed control on the cruelty of really teaching computer science main research areas theoretical computing science software engineering systems science algorithm design concurrent computing distributed computing formal methods programming methodology programming language research program design and development software architecture philosophy of computer programming and computing science scientific contributionsconcepts and methods algol 60 implementation call stack concurrency concurrent programming cooperating sequential processes critical section deadly embrace deadlock dining philosophers problem dutch national flag problem faulttolerant system gotoless programming guarded command language layered structure in software architecture levels of abstraction multithreaded programming mutual exclusion mutex producerconsumer problem bounded buffer problem program families predicate transformer semantics process synchronization selfstabilizing distributed system semaphore programming separation of concerns sleeping barber problem software crisis structured analysis structured programming the multiprogramming system unbounded nondeterminism weakest precondition calculus algorithms bankers algorithm dijkstras algorithm djp algorithm prims algorithm dijkstrascholten algorithm dekkers algorithm generalization smoothsort shuntingyard algorithm tricolor marking algorithm concurrent algorithms distributed algorithms deadlock prevention algorithms mutual exclusion algorithms selfstabilizing algorithms related people shlomi dolev per brinch hansen tony hoare olejohan dahl leslie lamport david parnas adriaan van wijngaarden niklaus wirth other topics dijkstra prize edsger w dijkstra prize in distributed computing centrum wiskunde informatica ew dijkstra archive university of texas at austin list of pioneers in computer science list of important publications in computer science list of important publications in theoretical computer science list of important publications in concurrent parallel and distributed computing international symposium on stabilization safety and security of distributed systems wikiquote vteconcurrent computinggeneral concurrency concurrency control process calculi csp ccs acp lotos calculus ambient calculus apicalculus pepa joincalculus classic problems aba problem cigarette smokers problem deadlock dining philosophers problem producerconsumer problem race condition readerswriters problem sleeping barber problem category concurrent computing vtesoftware engineeringfields computer programming requirements engineering software deployment software design software maintenance software testing systems analysis formal methods concepts data modeling enterprise architecture functional specification modeling language orthogonality programming paradigm software software archaeology software architecture software configuration management software development methodology software development process software quality software quality assurance software verification and validation structured analysis orientations agile aspectoriented object orientation ontology service orientation sdlc modelsdevelopmental agile eup executable uml incremental model iterative model prototype model rad up scrum spiral model vmodel waterfall model xp other spice cmmi data model er model function model information model metamodeling object model systems model view model languages idef uml usl sysml softwareengineers victor basili kent beck grady booch fred brooks barry boehm peter chen danese cooper ward cunningham tom demarco edsger w dijkstra delores m etter martin fowler adele goldstine margaret hamilton c a r hoare lois haibt mary jean harrold grace hopper watts humphrey michael a jackson ivar jacobson alan kay nancy leveson stephen j mellor bertrand meyer david parnas trygve reenskaug winston w royce james rumbaugh mary shaw peri tarr elaine weyuker niklaus wirth edward yourdon related fields computer science computer engineering project management risk management systems engineering category commons vtemajor fields of computer sciencenote this template roughly follows the 2012 acm computing classification systemhardware printed circuit board peripheral integrated circuit very large scale integration systems on chip socs energy consumption green computing electronic design automation hardware acceleration computer systemsorganization computer architecture embedded system realtime computing dependability networks network architecture network protocol network components network scheduler network performance evaluation network service software organization interpreter middleware virtual machine operating system software quality software notationsand tools programming paradigm programming language compiler domainspecific language modeling language software framework integrated development environment software configuration management software library software repository software development software development process requirements analysis software design software construction software deployment software maintenance programming team opensource model theory of computation model of computation formal language automata theory computational complexity theory logic semantics algorithms algorithm design analysis of algorithms algorithmic efficiency randomized algorithm computational geometry mathematicsof computing discrete mathematics probability statistics mathematical software information theory mathematical analysis numerical analysis informationsystems database management system information storage systems enterprise information system social information systems geographic information system decision support system process control system multimedia information system data mining digital library computing platform digital marketing world wide web information retrieval security cryptography formal methods security services intrusion detection system hardware security network security information security application security humancomputerinteraction interaction design social computing ubiquitous computing visualization accessibility concurrency concurrent computing parallel computing distributed computing multithreading multiprocessing artificialintelligence natural language processing knowledge representation and reasoning computer vision automated planning and scheduling search methodology control method philosophy of artificial intelligence distributed artificial intelligence machine learning supervised learning unsupervised learning reinforcement learning multitask learning crossvalidation graphics animation rendering image manipulation graphics processing unit mixed reality virtual reality image compression solid modeling appliedcomputing ecommerce enterprise software computational mathematics computational physics computational chemistry computational biology computational social science computational engineering computational healthcare digital art electronic publishing cyberwarfare electronic voting video games word processing operations research educational technology document management book category portal wikiproject commons vtesystems sciencesystems types anatomical art biological complex complex adaptive conceptual coupled humanenvironment database dynamical ecological economic energy formal holarchic information legal measurement metric multiagent nervous nonlinear operating physical planetary political sensory social star writing concepts doubling time leverage points limiting factor negative feedback positive feedback theoretical fields chaos theory complex systems control theory cybernetics earth system science living systems sociotechnical system systemics urban metabolism worldsystems theory analysis biology dynamics ecology engineering neuroscience pharmacology psychology theory thinking systems scientists alexander bogdanov russell l ackoff william ross ashby ruzena bajcsy bla h bnthy gregory bateson anthony stafford beer richard e bellman ludwig von bertalanffy margaret boden kenneth e boulding murray bowen kathleen carley mary cartwright c west churchman manfred clynes george dantzig edsger w dijkstra heinz von foerster stephanie forrest jay wright forrester barbara grosz charles a s hall lydia kavraki james j kay faina m kirillova george klir allenna leonard edward norton lorenz niklas luhmann humberto maturana margaret mead donella meadows mihajlo d mesarovic james grier miller radhika nagpal howard t odum talcott parsons ilya prigogine qian xuesen anatol rapoport peter senge claude shannon katia sycara francisco varela manuela m veloso kevin warwick norbert wiener jennifer wilby anthony wilden applications systems theory in anthropology systems theory in archaeology systems theory in political science organizations list principia cybernetica category portal commons vtea m turing award laureates1960s alan perlis 1966 maurice vincent wilkes 1967 richard hamming 1968 marvin minsky 1969 1970s james h wilkinson 1970 john mccarthy 1971 edsger w dijkstra 1972 charles bachman 1973 donald knuth 1974 allen newell herbert a simon 1975 michael o rabin dana scott 1976 john backus 1977 robert w floyd 1978 kenneth e iverson 1979 1980s tony hoare 1980 edgar f codd 1981 stephen cook 1982 ken thompson dennis ritchie 1983 niklaus wirth 1984 richard karp 1985 john hopcroft robert tarjan 1986 john cocke 1987 ivan sutherland 1988 william kahan 1989 1990s fernando j corbat 1990 robin milner 1991 butler lampson 1992 juris hartmanis richard e stearns 1993 edward feigenbaum raj reddy 1994 manuel blum 1995 amir pnueli 1996 douglas engelbart 1997 jim gray 1998 fred brooks 1999 2000s andrew yao 2000 olejohan dahl kristen nygaard 2001 ron rivest adi shamir leonard adleman 2002 alan kay 2003 vint cerf bob kahn 2004 peter naur 2005 frances e allen 2006 edmund m clarke e allen emerson joseph sifakis 2007 barbara liskov 2008 charles p thacker 2009 2010s leslie g valiant 2010 judea pearl 2011 shafi goldwasser silvio micali 2012 leslie lamport 2013 michael stonebraker 2014 martin hellman whitfield diffie 2015 tim bernerslee 2016 john l hennessy david patterson 2017 authority control worldcat identities acm dl 81100248871 bibsys 90335850 bpn 10020011 dblp dwedijkstra gnd 139688641 isni 0000 0001 1234 890x lccn n82078425 mgp 45747 ndl 00437921 nla 35036226 selibr 183814 snac w6475hq0 sudoc 059577517 viaf 17820452 