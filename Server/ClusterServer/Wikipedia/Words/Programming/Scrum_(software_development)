scrum (software development) software development core activities processes requirements design engineering construction testing debugging deployment maintenance paradigms and models agile cleanroom incremental prototyping spiral v model waterfall methodologies and frameworks asd devops dad dsdm fdd iid kanban lean sd less mdd msf psp rad rup safe scrum semat tsp up xp supporting disciplines configuration management documentation software quality assurance sqa project management user experience practices atdd bdd cco ci cd ddd pp standup tdd tools compiler debugger profiler gui designer modeling ide build automation release automation infrastructure as code testing standards and bodies of knowledge babok cmmi ieee standards iso 9001 isoiec standards pmbok swebok itil glossaries artificial intelligence computer science electrical and electronics engineering vte scrum is an agile framework for managing knowledge work with an emphasis on software development it is designed for teams of three to nine members who break their work into actions that can be completed within timeboxed iterations called sprints no longer than one month and most commonly two weeks then track progress and replan in 15minute standup meetings called daily scrums approaches to coordinating the work of multiple scrum teams in larger organizations include largescale scrum less scaled agile framework safe scrum of scrums and scrumscale among others key ideas scrum is an iterative and incremental framework for managing product development to product development and enables teams to selforganize by encouraging physical colocation or close online collaboration of all team members as well as daily facetoface communication among all team members and disciplines involved a key principle of scrum is the dual recognition that customers will change their minds about what they want or need often called requirements volatility and that there will be unpredictable challengesfor which a predictive or planned approach is not suited as such scrum adopts an evidencebased empirical approachaccepting that the problem cannot be fully understood or defined up front and instead focusing on how to maximize the teams ability to deliver quickly to respond to emerging requirements and to adapt to evolving technologies and changes in market conditions many of the terms used in scrum eg scrum master are typically written with leading capitals eg scrum master or as conjoint words written in camel case eg scrummaster to maintain an encyclopedic tone however this article uses normal sentence case for these termsunless they are recognized marks such as certified scrum master this is occasionally seen written in allcapitals as scrum while the trademark on the term scrum itself has been allowed to lapse so that it is deemed as owned by the wider community rather than an individual the leading capital is retainedexcept when used with other words as in daily scrum or scrum team history hirotaka takeuchi and ikujiro nonaka introduced the term scrum in the context of product development in their 1986 harvard business review article the new new product development game especially good at bringing about innovation continuously incrementally and spirally the authors described a new approach to commercial product development that would increase speed and flexibility based on case studies from manufacturing firms in the automotive photocopier and printer industries in the early 1990s ken schwaber used what would become scrum at his company advanced development methods while jeff sutherland john scumniotales and jeff mckenna developed a similar approach at easel corporation referring to it using the single word scrum in 1995 sutherland and schwaber jointly presented a paper describing the scrum framework at the business object design and implementation workshop held as part of objectoriented programming systems languages applications 95 oopsla 95 in austin texas in 2001 schwaber worked with mike beedle to describe the method in the book agile software development with scrum in 2002 schwaber with others founded the scrum alliance since 2009 there is a public document called the scrum guide roles there are three core roles in the scrum framework these are ideally colocated to deliver potentially shippable product increments every sprint together these three roles form the scrum team while many organizations have other roles involved with defining and delivering the product scrum defines only these three product owner the product owner represents the products stakeholders and the voice of the customer is responsible for the backlog and accountable for maximising the value that the team delivers the product owner defines the product in customercentric terms typically user stories adds them to the product backlog and prioritizes them based on importance and dependencies this role is equivalent to the customer representative role in some other agile frameworks such as extreme programming xp communication is a core responsibility of the product owner the ability to convey priorities and empathize with team members and stakeholders is vital to steer product development in the right direction the product owner role bridges the communication gap between the team and its stakeholders serving as a proxy for stakeholders to the team and as a team representative to the overall stakeholder community as the face of the team to the stakeholders the following are some of the communication tasks of the product owner to the stakeholders demonstrates the solution to key stakeholders who were not present at a sprint review defines and announces releases communicates team status organizes milestone reviews educates stakeholders in the development process negotiates priorities scope funding and schedule ensures that the product backlog is visible transparent and clear empathy is a key attribute for a product owner to havethe ability to put ones self in anothers shoes a product owner converses with different stakeholders who have a variety of backgrounds job roles and objectives a product owner must be able to see from these different points of view to be effective it is wise for a product owner to know the level of detail the audience needs the development team needs thorough feedback and specifications so they can build a product up to expectation while an executive sponsor may just need summaries of progress providing more information than necessary may lose stakeholder interest and waste time a direct means of communication is the most preferred by seasoned agile product owners a product owners ability to communicate effectively is also enhanced by being skilled in techniques that identify stakeholder needs negotiate priorities between stakeholder interests and collaborate with developers to ensure effective implementation of requirements development team the development team is responsible for delivering potentially shippable product increments every sprint the sprint goal the team has from three to nine members who carry out all tasks required to build the product increments analysis design development testing technical writing etc although there will be several disciplines represented in the team its members are referred to generically as developers to avoid potential confusion that this only refers to programmers some organizations call this a delivery team and its members just team members the development team in scrum is selforganizing even though there may be interaction with other roles outside the team such as a project management office pmo scrum master scrum is facilitated by a scrum master who is accountable for removing impediments to the ability of the team to deliver the product goals and deliverables the scrum master is not a traditional team lead or project manager but acts as a buffer between the team and any distracting influences the scrum master ensures that the scrum framework is followed the scrum master helps to ensure the team follows the agreed processes in the scrum framework often facilitates key sessions and encourages the team to improve the role has also been referred to as a team facilitator or servantleader to reinforce these dual perspectives the core responsibilities of a scrum master include but are not limited to helping the product owner maintain the product backlog in a way that ensures the needed work is well understood so the team can continually make forward progress helping the team to determine the definition of done for the product with input from key stakeholders coaching the team within the scrum principles in order to deliver highquality features for its product promoting selforganization within the team helping the scrum team to avoid or remove impediments to its progress whether internal or external to the team facilitating team events to ensure regular progress educating key stakeholders in the product on scrum principles coaching the development team in selforganization and crossfunctionality one of the ways the scrum master role differs from a project manager is that the latter may have people management responsibilities and the scrum master does not scrum does not formally recognise the role of project manager as traditional command and control tendencies would cause difficulties workflow sprint scrum frameworknot to be confused with hackathon code sprints the scrum process a sprint or iteration is the basic unit of development in scrum the sprint is a timeboxed effort that is it is restricted to a specific duration each sprint starts with a sprint planning event that aims to define a sprint backlog identify the work for the sprint and make an estimated forecast for the sprint goal each sprint ends with a sprint review and sprint retrospective that reviews progress to show to stakeholders and identify lessons and improvements for the next sprints scrum emphasizes working product at the end of the sprint that is really done in the case of software this likely includes that the software has been fully integrated tested and documented and is potentially shippable sprint planning at the beginning of a sprint the scrum team holds a sprint planning event to mutually discuss and agree on the scope of work that is intended to be done during that sprint select product backlog items that can be completed in one sprint prepare a sprint backlog that includes the work needed to complete the selected product backlog items the recommended duration is four hours for a twoweek sprint prorata for other sprint durations during the first half the whole scrum team development team scrum master and product owner selects the product backlog items they believe could be completed in that sprint during the second half the development team identifies the detailed work tasks required to complete those product backlog items resulting in a confirmed sprint backlog as the detailed work is elaborated some product backlog items may be split or put back into the product backlog if the team no longer believes they can complete the required work in a single sprint once the development team has prepared their sprint backlog they forecast usually by voting which tasks will be delivered within the sprint daily scrum a daily scrum in the computing room this centralized location helps the team start on time each day during a sprint the team holds a daily scrum or standup with specific guidelines all members of the development team come prepared the daily scrum starts precisely on time even if some development team members are missing should happen at the same time and place every day is limited timeboxed to fifteen minutes anyone is welcome though only development team members should contribute during the daily scrum each team member typically answers three questions what did i complete yesterday that contributed to the team meeting our sprint goal what do i plan to complete today to contribute to the team meeting our sprint goal do i see any impediment that could prevent me or the team from meeting our sprint goal any impediment eg stumbling block risk issue delayed dependency assumption proved unfounded identified in the daily scrum should be captured by the scrum master and displayed on the teams scrum board or on a shared risk board with an agreed person designated to working toward a resolution outside of the daily scrum no detailed discussions should happen during the daily scrum sprint review at the end of a sprint the team holds two events the sprint review and the sprint retrospective at the sprint review the team reviews the work that was completed and the planned work that was not completed presents the completed work to the stakeholders aka the demo collaborates with the stakeholders on what to work on next guidelines for sprint reviews incomplete work cannot be demonstrated the recommended duration is two hours for a twoweek sprint proportional for other sprintdurations sprint retrospective at the sprint retrospective the team reflects on the past sprint identifies and agrees on continuous process improvement actions guidelines for sprint retrospectives three main questions are asked in the sprint retrospective what went well during the sprint what did not go well what could be improved for better productivity in the next sprint the recommended duration is oneandahalf hours for a twoweek sprint proportional for other sprint durations this event is facilitated by the scrum master extensions the following activities are commonly done although not considered by all as a core part of scrum backlog refinement backlog refinement once called backlog grooming is the ongoing process of reviewing product backlog items and checking that they are appropriately prioritised and prepared in a way that makes them clear and executable for teams once they enter sprints via the sprint planning activity product backlog items may be broken into multiple smaller ones acceptance criteria may be clarified and dependencies investigation and preparatory work may be identified and agreed as technical spikes although not originally a core scrum practice backlog refinement has been added to the scrum guide and adopted as a way of managing the quality of product backlog items entering a sprint with a recommended investment of up to 10 of a teams sprint capacity the backlog can also include technical debt also known as design debt or code debt this is a concept in software development that reflects the implied cost of additional rework caused by choosing an easy solution now instead of using a better approach that would take longer cancelling a sprint the product owner can cancel a sprint if necessary the product owner may do so with input from the team scrum master or management for instance management may wish the product owner to cancel a sprint if external circumstances negate the value of the sprint goal if a sprint is abnormally terminated the next step is to conduct a new sprint planning where the reason for the termination is reviewed artifacts product backlog the product backlog comprises an ordered list of product requirements that a scrum team maintains for a product the format of product backlog items varies common formats include user stories use cases or any other requirements format the team finds useful these will define features bug fixes nonfunctional requirements etcwhatever must be done to successfully deliver a viable product the product owner prioritizes product backlog items pbis based on considerations such as risk business value dependencies size and date needed the product backlog is what will be delivered ordered into the sequence in which it should be delivered it is visible to everyone but may only be changed with the consent of the product owner who is ultimately responsible for ordering product backlog items for the development team to choose the product backlog contains the product owners assessment of business value and the development teams assessment of development effort which are often but not always stated in story points using the rounded fibonacci scale these estimates help the product owner to gauge the timeline and may influence the ordering of product backlog items for example if two features have the same business value the product owner may schedule earlier delivery of the one with the lower development effort because the return on investment is higher or the one with higher development effort because it is more complex or riskier and they want to retire that risk earlier the product backlog and the business value of each product backlog item is the responsibility of the product owner the size ie estimated complexity or effort of each item is however determined by the development team who contributes by sizing in story points or in estimated hours every team should have a product owner although in many instances they will work with more than one team the product owner is responsible for maximizing the value of the product the product owner gathers input and takes feedback from and is lobbied by many people but ultimately makes the call on what gets built the product backlog captures requests to modify a productincluding new features replacing old features removing features and fixing issues ensures the development team has work that maximizes business benefit to the product owner typically the product owner and the scrum team come together and write down everything that must be prioritized and this becomes content for the first sprintwhich is a block of time meant for focused work on selected items that can be accommodated within a timeframe the product backlog can evolve as new information surfaces about the product and about its customers and so later sprints may address new work the following items typically comprise a product backlog features bugs technical work and knowledge acquisition a feature is wanted while a bug is unintended or unwanted but may not be necessarily something defective an example of technical work could be to run a virus check on all developers workstations an example of knowledge acquisition could be to research wordpress plugin libraries and making a selection management a product backlog in its simplest form is merely a list of items to work on having wellestablished rules about how work is added removed and ordered helps the whole team make better decisions about how to change the product the product owner prioritizes product backlog items based on which are needed soonest the team then chooses which items they can complete in the coming sprint on the scrum board the team moves items from the product backlog to the sprint backlog which is the list of items they will build conceptually it is ideal for the team to only select what they think they can accomplish from the top of the list but it is not unusual to see in practice that teams are able to take lowerpriority items from the list along with the top ones selected this normally happens because there is time left within the sprint to accommodate more work items at the top of the backlog the items to work on first should be broken down into stories that are suitable for the development team to work on the further down the backlog goes the less refined the items should be as schwaber and beedle put it the lower the priority the less detail until you can barely make out the backlog item as the team works through the backlog it must be assumed that change happens outside their environmentthe team can learn about new market opportunities to take advantage of competitor threats that arise and feedback from customers that can change the way the product was meant to work all of these new ideas tend to trigger the team to adapt the backlog to incorporate new knowledge this is part of the fundamental mindset of an agile team the world changes the backlog is never finished sprint backlog a scrum task board the sprint backlog is the list of work the development team must address during the next sprint the list is derived by the scrum team progressively selecting product backlog items in priority order from the top of the product backlog until they feel they have enough work to fill the sprint the development team should keep in mind its past performance assessing its capacity for the newsprint and use this as a guideline of how much effort they can complete the product backlog items may be broken down into tasks by the development team tasks on the sprint backlog are never assigned or pushed to team members by someone else rather team members sign up for or pull tasks as needed according to the backlog priority and their own skills and capacity this promotes selforganization of the development team and developer buyin the sprint backlog is the property of the development team and all included estimates are provided by the development team often an accompanying task board is used to see and change the state of the tasks of the current sprint like to do in progress and done once a sprint backlog is committed no additional work can be added to the sprint backlog except by the team once a sprint has been delivered the product backlog is analyzed and reprioritized if necessary and the next set of functionality is selected for the next sprint product increment the increment or potentially shippable increment psi is the sum of all the product backlog items completed during a sprint integrated with the work of all previous sprints at the end of a sprint the increment must be complete according to the scrum teams definition of done dod fully functioning and in a usable condition regardless of whether the product owner decides to actually release it extensions the following artifacts are commonly used although not considered by all as a core part of scrum sprint burndown chart a sample burndown chart for a completed sprint showing remaining effort at the end of each day burn down chart the sprint burndown chart is a publicly displayed chart showing remaining work in the sprint backlog updated every day it gives a simple view of the sprint progress it also provides quick visualizations for reference the horizontal axis of the sprint burndown chart shows the days in a sprint while the vertical axis shows the amount of work remaining each day typically representing the estimate of hours of work remaining during sprint planning the ideal burndown chart is plotted then during the sprint each member picks up tasks from the sprint backlog and works on them at the end of the day they update the remaining hours for tasks to be completed in such a way the actual burndown chart is updated day by day it should not be confused with an earned value chart release burnup chart a sample burnup chart for a release showing scope completed each sprint the release burnup chart is a way for the team to provide visibility and track progress toward a release updated at the end of each sprint it shows progress toward delivering a forecast scope the horizontal axis of the release burnup chart shows the sprints in a release while the vertical axis shows the amount of work completed at the end of each sprint typically representing cumulative story points of work completed progress is plotted as a line that grows up to meet a horizontal line that represents the forecast scope often shown with a forecast based on progress to date that indicates how much scope might be completed by a given release date or how many sprints it will take to complete the given scope the release burnup chart makes it easy to see how much work has been completed how much work has been added or removed if the horizontal scope line moves and how much work is left to be done definition of done dod the exitcriteria to determine whether a product backlog item is complete in many cases the dod requires that all regression tests be successful the definition of done may vary from one scrum team to another but must be consistent within one team velocity the total effort a team is capable of in a sprint the number is derived by evaluating the work typically in user story points completed in the last sprint the collection of historical velocity data is a guideline for assisting the team in understanding how much work they can likely achieve in a future sprint spike a timeboxed period used to research a concept or create a simple prototype spikes can either be planned to take place in between sprints or for larger teams a spike might be accepted as one of many sprint delivery objectives spikes are often introduced before the delivery of large or complex product backlog items in order to secure budget expand knowledge or produce a proof of concept the duration and objectives of a spike is agreed between product owner and development team before the start unlike sprint commitments spikes may or may not deliver tangible shippable valuable functionality for example the objective of a spike might be to successfully reach a decision on a course of action the spike is over when the time is up not necessarily when the objective has been delivered tracer bullet also called a drone spike a tracer bullet is a spike with the current architecture current technology set current set of best practices that result in production quality code it might just be a very narrow implementation of the functionality but is not throwaway code it is of production quality and the rest of the iterations can build on this code the name has military origins as ammunition that makes the path of the bullet visible allowing for corrections often these implementations are a quick shot through all layers of an application such as connecting a single forms input field to the backend to prove the layers connect as expected limitations scrum works less well in the following circumstances teams whose members are geographically dispersed or parttime in scrum developers should have close and ongoing interaction ideally working together in the same space most of the time while recent improvements in technology have reduced the impact of these barriers eg being able to collaborate on a digital whiteboard the agile manifesto asserts that the best communication is face to face teams whose members have very specialized skills in scrum developers should be able to work on any task or pick up work that another developer has started this can be managed by good scrum leadership while team members with very specific skills can and do contribute well they should be encouraged to learn more about and collaborate with other disciplines products with many external dependencies in scrum dividing product development into short sprints requires careful planning external dependencies such as deliveries of software from other teams can lead to delays and the failure of individual sprints products that are mature or legacy or with regulated quality control in scrum product increments should be fully developed and tested in a single sprint products that need large amounts of regression testing or safety testing eg medical devices or vehicle control for each release are less suited to short sprints than to longer waterfall releases from a business perspective scrum has many virtues one of which is that it is designed to yield the best business solutions however the efficiency by which it does so in any given organization can vary widely and is largely dependent on the ability of the organization to adhere to the implementation guidelines every company has its own distinct organizational structure culture and set of business practices and some are more naturally amenable to this methodology than others tools for implementation comparison of scrum software like other agile methods effective adoption of scrum can be supported through a wide range of tools many companies use universal tools such as spreadsheets to build and maintain artifacts such as the sprint backlog there are also opensource and proprietary software packages for scrumwhich are either dedicated to product development using the scrum framework or support multiple product development approaches including scrum other organizations implement scrum without software tools and maintain their artifacts in hardcopy forms such as paper whiteboards and sticky notes scrum values scrum is a feedbackdriven empirical approach which is like all empirical process control underpinned by the three pillars of transparency inspection and adaptation all work within the scrum framework should be visible to those responsible for the outcome the process the workflow progress etc in order to make these things visible scrum teams need to frequently inspect the product being developed and how well the team is working with frequent inspection the team can spot when their work deviates outside of acceptable limits and adapt their process or the product under development these three pillars require trust and openness in the team which the following five values of scrum enable commitment team members individually commit to achieving their team goals each and every sprint courage team members know they have the courage to work through conflict and challenges together so that they can do the right thing focus team members focus exclusively on their team goals and the sprint backlog there should be no work done other than through their backlog openness team members and their stakeholders agree to be transparent about their work and any challenges they face respect team members respect each other to be technically capable and to work with good intent adaptations the hybridization of scrum with other software development methodologies is common as scrum does not cover the whole product development lifecycle therefore organizations find the need to add in additional processes to create a more comprehensive implementation for example at the start of product development organizations commonly add process guidance on the business case requirements gathering and prioritization initial highlevel design and budget and schedule forecasting various authors and communities of people who use scrum have also suggested more detailed techniques for how to apply or adapt scrum to particular problems or organizations many refer to these methodological techniques as patterns by analogy with design patterns in architecture and software finance and human resources scrumban scrumban scrumban is a software production model based on scrum and kanban scrumban is especially suited for product maintenance with frequent and unexpected work items such as production defects or programming errors in such cases the timelimited sprints of the scrum framework may be perceived to be of less benefit although scrums daily events and other practices can still be applied depending on the team and the situation at hand visualization of the work stages and limitations for simultaneous unfinished work and defects are familiar from the kanban model using these methods the teams workflow is directed in a way that allows for minimum completion time for each work item or programming error and on the other hand ensures each team member is constantly employed to illustrate each stage of work teams working in the same space often use postit notes or a large whiteboard in the case of decentralized teams stageillustration software such as assembla jira or agilo the major differences between scrum and kanban is that in scrum work is divided into sprints that last a fixed amount of time whereas in kanban the flow of work is continuous this is visible in work stage tables which in scrum are emptied after each sprint whereas in kanban all tasks are marked on the same table scrum focuses on teams with multifaceted knowhow whereas kanban makes specialized functional teams possible scrum of scrums the scrum of scrums is a technique to operate scrum at scale for multiple teams working on the same product allowing them to discuss progress on their interdependencies focusing on how to coordinate delivering software rather than simply a progress update the scrum of scrums should focus on how teams are collectively working to resolve mitigate or accept any risks impediments dependencies and assumptions ridas that have been identified the scrum of scrums tracks these ridas via a backlog of its own such as a risk board sometimes known as a roam board after the initials of resolved owned accepted and mitigated this should run similar to a daily scrum with each ambassador answering the following four questions what risks impediments dependencies or assumptions has your team resolved since we last met what risks impediments dependencies or assumptions will your team resolve before we meet again are there any new risks impediments dependencies or assumptions slowing your team down or getting in their way are you about to introduce a new risk impediment dependency or assumption that will get in another teams way as jeff sutherland commented since i originally defined the scrum of scrums ken schwaber was at idx working with me i can definitively say the scrum of scrums is not a meta scrum the scrum of scrums as i have used it is responsible for delivering the working software of all teams to the definition of done at the end of the sprint or for releases during the sprint patientkeeper delivered to production four times per sprint ancestrycom delivers to production 220 times per twoweek sprint hubspot delivers live software 100300 times a day the scrum of scrums master is held accountable for making this work so the scrum of scrums is an operational delivery mechanism largescale scrum largescale scrum less is a product development framework that extends scrum with scaling rules and guidelines without losing the original purposes of scrum there are two levels to the framework the first less level is designed for up to 8 teams the second level known as less huge introduces additional scaling elements for development with up to hundreds of developers scaling scrum starts with understanding and being able to adopt standard real oneteam scrum largescale scrum requires examining the purpose of singleteam scrum elements and figuring out how to reach the same purpose while staying within the constraints of the standard scrum rules bas vodde and craig larman evolved the less framework from their experiences working with largescale product development especially in the telecoms and finance industries it evolved by taking scrum and trying many different experiments to discover what works in 2013 the experiments were solidified into the less framework rules scrum in the classroom many courses in higher education are adapting the scrum framework to give students in both it and nonit environments new tools and better insight for dealing with project management the scrum framework helps students grasp the concepts of the coursework in new ways while also fostering better teamwork better communication breaking tasks down into smaller parts and it helps students become more selfdriven and selforganized scrum has been used to help students become more selfaware and it encourages selfdirected learning many of the aforementioned skills that are gained by classroom adapted scrum are sought after by many companies and help students become more prepared for the workplace postgraduation it is worth noting that classroom adopted scrum is not pure scrum as it has to be adapted to fit a 16week period and often many members of the team must play many rolesthis does however help reinforce the agile philosophy of always being ready for change constant adaption and being ready for new requirements and constraints disciplined agile delivery lean software development project management unified process highperformance teams agile testing vacaniti daniel february 2018 the kanban guide for scrum teams pdf scrumorg retrieved march 12 2018 sutherland jeff schwaber ken 2013 scrum guides scrumguidesorg retrieved july 26 2017 verheyen gunther 2013 scrum a pocket guide a smart travel companion isbn9789087537203 mnch jrgen armbrust ove soto martn kowalczyk martin 2012 software process definition and management isbn9783642242915 deemer pete benefield gabrielle larman craig vodde bas 2009 the scrum primer retrieved june 1 2009 janoff ns rising l 2000 the scrum software development process for small teams pdf retrieved february 26 2015 wikimedia commons has media related to scrum development scaled scrum by scrumorg agile alliances scrum library a scrum process description by the eclipse process framework epf project vtesoftware engineeringfields computer programming requirements engineering software deployment software design software maintenance software testing systems analysis formal methods concepts data modeling enterprise architecture functional specification modeling language orthogonality programming paradigm software software archaeology software architecture software configuration management software development methodology software development process software quality software quality assurance software verification and validation structured analysis orientations agile aspectoriented object orientation ontology service orientation sdlc modelsdevelopmental agile eup executable uml incremental model iterative model prototype model rad up scrum spiral model vmodel waterfall model xp other spice cmmi data model er model function model information model metamodeling object model systems model view model languages idef uml usl sysml softwareengineers victor basili kent beck grady booch fred brooks barry boehm peter chen danese cooper ward cunningham tom demarco edsger w dijkstra delores m etter martin fowler adele goldstine margaret hamilton c a r hoare lois haibt mary jean harrold grace hopper watts humphrey michael a jackson ivar jacobson alan kay nancy leveson stephen j mellor bertrand meyer david parnas trygve reenskaug winston w royce james rumbaugh mary shaw peri tarr elaine weyuker niklaus wirth edward yourdon related fields computer science computer engineering project management risk management systems engineering category commons 