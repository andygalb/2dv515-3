software construction not to be confused with software development software development core activities processes requirements design engineering construction testing debugging deployment maintenance paradigms and models agile cleanroom incremental prototyping spiral v model waterfall methodologies and frameworks asd devops dad dsdm fdd iid kanban lean sd less mdd msf psp rad rup safe scrum semat tsp up xp supporting disciplines configuration management documentation software quality assurance sqa project management user experience practices atdd bdd cco ci cd ddd pp standup tdd tools compiler debugger profiler gui designer modeling ide build automation release automation infrastructure as code testing standards and bodies of knowledge babok cmmi ieee standards iso 9001 isoiec standards pmbok swebok itil glossaries artificial intelligence computer science electrical and electronics engineering vte software construction is a software engineering discipline it is the detailed creation of working meaningful software through a combination of coding verification unit testing integration testing and debugging it is linked to all the other software engineering disciplines most strongly to software design and software testing software construction fundamentals minimizing complexity the need to reduce complexity is mainly driven by limited ability of most people to hold complex structures and information in their working memories reduced complexity is achieved through emphasizing the creation of code that is simple and readable rather than clever minimizing complexity is accomplished through making use of standards and through numerous specific techniques in coding it is also supported by the constructionfocused quality techniques anticipating change anticipating change helps software engineers build extensible software which means they can enhance a software product without disrupting the underlying structure research over 25 years showed that the cost of rework can be 10 to 100 times 5 to 10 times for smaller projects more expensive than getting the requirements right the first time given that 25 of the requirements change during development on average project the need to reduce the cost of rework elucidates the need for anticipating change constructing for verification constructing for verification means building software in such a way that faults can be ferreted out readily by the software engineers writing the software as well as during independent testing and operational activities specific techniques that support constructing for verification include following coding standards to support code reviews unit testing organizing code to support automated testing and restricted use of complex or hardtounderstand language structures among others reuse systematic reuse can enable significant software productivity quality and cost improvements reuse has two closely related facets construction for reuse create reusable software assets construction with reuse reuse software assets in the construction of a new solution standards in construction standards whether external created by international organizations or internal created at the corporate level that directly affect construction issues include communication methods such as standards for document formats and contents programming languages coding standards platforms tools such as diagrammatic standards for notations like uml managing construction construction models numerous models have been created to develop software some of which emphasize construction more than others some models are more linear from the construction point of view such as the waterfall and stageddelivery life cycle models these models treat construction as an activity which occurs only after significant prerequisite work has been completedincluding detailed requirements work extensive design work and detailed planning other models are more iterative such as evolutionary prototyping extreme programming and scrum these approaches tend to treat construction as an activity that occurs concurrently with other software development activities including requirements design and planning or overlaps them construction planning the choice of construction method is a key aspect of the construction planning activity the choice of construction method affects the extent to which construction prerequisites eg requirements analysis software design etc are performed the order in which they are performed and the degree to which they are expected to be completed before construction work begins construction planning also defines the order in which components are created and integrated the software quality management processes the allocation of task assignments to specific software engineers and the other tasks according to the chosen method construction measurement numerous construction activities and artifacts can be measured including code developed code modified code reused code destroyed code complexity code inspection statistics faultfix and faultfind rates effort and scheduling these measurements can be useful for purposes of managing construction ensuring quality during construction improving the construction process as well as for other reasons practical considerations software construction is driven by many practical considerations construction design in order to account for the unanticipated gaps in the software design during software construction some design modifications must be made on a smaller or larger scale to flesh out details of the software design low fanout is one of the design characteristics found to be beneficial by researchers information hiding proved to be a useful design technique in large programs that made them easier to modify by a factor of 4 construction languages construction languages include all forms of communication by which a human can specify an executable problem solution to a computer they include configuration languages toolkit languages and programming languages configuration languages are languages in which software engineers choose from a limited set of predefined options to create new or custom software installations toolkit languages are used to build applications out of toolkits and are more complex than configuration languages scripting languages are kinds of application programming languages that supports scripts which are often interpreted rather than compiled programming languages are the most flexible type of construction languages which use three general kinds of notation linguistic notations which are distinguished in particular by the use of wordlike strings of text to represent complex software constructions and the combination of such wordlike strings into patterns that have a sentencelike syntax formal notations which rely less on intuitive everyday meanings of words and text strings and more on definitions backed up by precise unambiguous and formal or mathematical definitions visual notations which rely much less on the textoriented notations of both linguistic and formal construction and instead rely on direct visual interpretation and placement of visual entities that represent the underlying software programmers working in a language they have used for three years or more are about 30 percent more productive than programmers with equivalent experience who are new to a language highlevel languages such as c java smalltalk and visual basic yield 5 to 15 times better productivity reliability simplicity and comprehensibility than lowlevel languages such as assembly and c equivalent code has been shown to need fewer lines to be implemented in high level languages than in lower level languages coding computer programming the following considerations apply to the software construction coding activity techniques for creating understandable source code including naming and source code layout one study showed that the effort required to debug a program is minimized when the variables names are between 10 and 16 characters use of classes enumerated types variables named constants and other similar entities the following considerations should be noted a study done by nasa showed that the putting the code into wellfactored classes can double the code reusability compared to the code developed using functional design one experiment showed that designs which access arrays sequentially rather than randomly result in fewer variables and fewer variable references use of control structures the following considerations should be noted one experiment found that loopswithexit are more comprehensible than other kinds of loops regarding the level of nesting in loops and conditionals studies have shown that programmers have difficulty comprehending more than three levels of nesting control flow complexity has been shown to correlate with low reliability and frequent errors handling of error conditionsboth planned errors and exceptions input of bad data for example prevention of codelevel security breaches buffer overruns or array index overflows for example resource usage via use of exclusion mechanisms and discipline in accessing serially reusable resources including threads or database locks source code organization into statements and routines the following considerations should be noted regarding routines highly cohesive routines proved to be less error prone than routines with lower cohesion a study of 450 routines found that 50 percent of the highly cohesive routines were fault free compared to only 18 percent of routines with low cohesion another study of a different 450 routines found that routines with the highest couplingtocohesion ratios had 7 times as many errors as those with the lowest couplingtocohesion ratios and were 20 times as costly to fix although studies showed inconclusive results regarding the correlation between routine sizes and the rate of errors in them but one study found that routines with fewer than 143 lines of code were 24 times less expensive to fix than larger routines another study showed that the code needed to be changed least when routines averaged 100 to 150 lines of code another study found that structural complexity and amount of data in a routine were correlated with errors regardless of its size interfaces between routines are some of the most errorprone areas of a program one study showed that 39 percent of all errors were errors in communication between routines unused parameters are correlated with an increased error rate in one study only 17 to 29 percent of routines with more than one unreferenced variable had no errors compared to 46 percent in routines with no unused variables the number of parameters of a routine should be 7 at maximum as research has found that people generally cannot keep track of more than about seven chunks of information at once source code organization into classes packages or other structures when considering containment the maximum number of data members in a class shouldnt exceed 72 research has shown that this number is the number of discrete items a person can remember while performing other tasks when considering inheritance the number of levels in the inheritance tree should be limited deep inheritance trees have been found to be significantly associated with increased fault rates when considering the number of routines in a class it should be kept as small as possible a study on c programs has found an association between the number of routines and the number of faults code documentation code tuning construction testing the purpose of construction testing is to reduce the gap between the time at which faults are inserted into the code and the time those faults are detected in some cases construction testing is performed after code has been written in testfirst programming test cases are created before code is written construction involves two forms of testing which are often performed by the software engineer who wrote the code unit testing integration testing reuse implementing software reuse entails more than creating and using libraries of assets it requires formalizing the practice of reuse by integrating reuse processes and activities into the software life cycle the tasks related to reuse in software construction during coding and testing are the selection of the reusable units databases test procedures or test data the evaluation of code or test reusability the reporting of reuse information on new code test procedures or test data construction quality the primary techniques used to ensure the quality of code as it is constructed include unit testing and integration testing one study found that the average defect detection rates of unit testing and integration testing are 30 and 35 respectively testfirst development use of assertions and defensive programming debugging inspections one study found that the average defect detection rate of formal code inspections is 60 regarding the cost of finding defects a study found that code reading detected 80 more faults per hour than testing another study shown that it costs six times more to detect design defects by using testing than by using inspections a study by ibm showed that only 35 hours where needed to find a defect through code inspections versus 1525 hours through testing microsoft has found that it takes 3 hours to find and fix a defect by using code inspections and 12 hours to find and fix a defect by using testing in a 700 thousand lines program it was reported that code reviews were several times as costeffective as testing technical reviews one study found that the average defect detection rates of informal code reviews and desk checking are 25 and 40 respectively static analysis ieee1028 studies have shown that a combination of these techniques need to be used to achieve high defect detection rate other studies showed that different people tend to find different defects one study found that the extreme programming practices of pair programming desk checking unit testing integration testing and regression testing can achieve a 90 defect detection rate 80 of the errors tend to be concentrated in 20 of the projects classes and routines 50 of the errors are found in 5 of the projects classes ibm was able to reduce the customer reported defects by a factor of ten to one and to reduce their maintenance budget by 45 in its ims system by repairing or rewriting only 31 out of 425 classes around 20 of a projects routines contribute to 80 of the development costs a classic study by ibm found that few errorprone routines of os360 were the most expensive entities they had around 50 defects per 1000 lines of code and fixing them costs 10 times what it took to develop the whole system integration a key activity during construction is the integration of separately constructed routines classes components and subsystems in addition a particular software system may need to be integrated with other software or hardware systems concerns related to construction integration include planning the sequence in which components will be integrated creating scaffolding to support interim versions of the software determining the degree of testing and quality work performed on components before they are integrated and determining points in the project at which interim versions of the software are tested construction technologies objectoriented runtime issues objectoriented languages support a series of runtime mechanisms that increase the flexibility and adaptability of the programs like data abstraction encapsulation modularity inheritance polymorphism and reflection data abstraction is the process by which data and programs are defined with a representation similar in form to its meaning while hiding away the implementation details assertions design by contract and defensive programming assertions are executable predicates which are placed in a program that allow runtime checks of the program error handling exception handling and fault tolerance error handling refers to the programming practice of anticipating and coding for error conditions that may arise when the program runs exception handling is a programming language construct or hardware mechanism designed to handle the occurrence of exceptions special conditions that change the normal flow of program execution statebased and tabledriven construction techniques statebased programming is a programming technology using finite state machines to describe program behaviors runtime configuration and internationalization runtime configuration is a technique that binds variable values and program settings when the program is running usually by updating and reading configuration files in a justintime mode internationalization is the technical activity of preparing a program usually interactive software to support multiple locales the corresponding activity localization is the activity of modifying a program to support a specific local language software engineering software development notes mwparseroutput refbeginfontsize90marginbottom05emmwparseroutput refbeginhangingindentsulliststyletypenonemarginleft0mwparseroutput refbeginhangingindentsullimwparseroutput refbeginhangingindentsdlddmarginleft0paddingleft32emtextindent32emliststylenonemwparseroutput refbegin100fontsize100 pierre bourque richard e dick fairley eds 2014 chapter 3 software construction guide to the software engineering body of knowledge version 30 ieee computer society isbn9780769551661cs1 maint uses editors parameter link mcconnell steven 2004 code complete 2nd ed microsoft press isbn9780735619678 thayer richard dorfman merlin 2013 software engineering essentials volume i the development process fourth ed software management training press carmichael california isbn9780985270704 guide to the software engineering body of knowledge 2004 version by ieee computer society guide to the software engineering body of knowledge version 30 ieee computer society 2014 