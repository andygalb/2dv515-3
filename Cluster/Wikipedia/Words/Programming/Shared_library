library (computing) software library redirects here it is not to be confused with library software this article is about a software development concept for a repository of digital assets see digital library illustration of an application which uses libvorbisfile to play an ogg vorbis file in computer science a library is a collection of nonvolatile resources used by computer programs often for software development these may include configuration data documentation help data message templates prewritten code and subroutines classes values or type specifications in ibms os360 and its successors they are referred to as partitioned data sets a library is also a collection of implementations of behavior written in terms of a language that has a welldefined interface by which the behavior is invoked for instance people who want to write a higher level program can use a library to make system calls instead of implementing those system calls over and over again in addition the behavior is provided for reuse by multiple independent programs a program invokes the libraryprovided behavior via a mechanism of the language for example in a simple imperative language such as c the behavior in a library is invoked by using cs normal functioncall what distinguishes the call as being to a library function versus being to another function in the same program is the way that the code is organized in the system library code is organized in such a way that it can be used by multiple programs that have no connection to each other while code that is part of a program is organized to be used only within that one program this distinction can gain a hierarchical notion when a program grows large such as a multimillionline program in that case there may be internal libraries that are reused by independent subportions of the large program the distinguishing feature is that a library is organized for the purposes of being reused by independent programs or subprograms and the user only needs to know the interface and not the internal details of the library the value of a library lies in the reuse of the behavior when a program invokes a library it gains the behavior implemented inside that library without having to implement that behavior itself libraries encourage the sharing of code in a modular fashion and ease the distribution of the code the behavior implemented by a library can be connected to the invoking program at different program lifecycle phases if the code of the library is accessed during the build of the invoking program then the library is called a static library an alternative is to build the executable of the invoking program and distribute that independently of the library implementation the library behavior is connected after the executable has been invoked to be executed either as part of the process of starting the execution or in the middle of execution in this case the library is called a dynamic library loaded at run time a dynamic library can be loaded and linked when preparing a program for execution by the linker alternatively in the middle of execution an application may explicitly request that a module be loaded most compiled languages have a standard library although programmers can also create their own custom libraries most modern software systems provide libraries that implement the majority of the system services such libraries have commoditized the services which a modern application requires as such most code used by modern applications is provided in these system libraries history the earliest programming concepts analogous to libraries were intended to separate data definitions from the program implementation jovial brought the compool communication pool concept to popular attention in 1959 although it adopted the idea from the largesystem sage software following the computer science principles of separation of concerns and information hiding comm pools purpose was to permit the sharing of system data among many programs by providing a centralized data description cobol also included primitive capabilities for a library system in 1959 another major contributor to the modern library concept came in the form of the subprogram innovation of fortran fortran subprograms can be compiled independently of each other but the compiler lacked a linker so prior to the introduction of modules in fortran90 type checking between fortran finally historians of the concept should remember the influential simula 67 simula was the first objectoriented programming language and its classes were nearly identical to the modern concept as used in java c and c the class concept of simula was also a progenitor of the package in ada and the module of modula2 linking link time and linker computing libraries are important in the program linking or binding process which resolves references known as links or symbols to library modules the linking process is usually automatically done by a linker or binder program that searches a set of libraries and other modules in a given order usually it is not considered an error if a link target can be found multiple times in a given set of libraries linking may be done when an executable file is created or whenever the program is used at run time the references being resolved may be addresses for jumps and other routine calls they may be in the main program or in one module depending upon another they are resolved into fixed or relocatable addresses from a common base by allocating runtime memory for the memory segments of each module referenced some programming languages may use a feature called smart linking whereby the linker is aware of or integrated with the compiler such that the linker knows how external references are used and code in a library that is never actually used even though internally referenced can be discarded from the compiled application for example a program that only uses integers for arithmetic or does no arithmetic operations at all can exclude floatingpoint library routines this smartlinking feature can lead to smaller application file sizes and reduced memory usage relocation relocation computer science some references in a program or library module are stored in a relative or symbolic form which cannot be resolved until all code and libraries are assigned final static addresses relocation is the process of adjusting these references and is done either by the linker or the loader in general relocation cannot be done to individual libraries themselves because the addresses in memory may vary depending on the program using them and other libraries they are combined with positionindependent code avoids references to absolute addresses and therefore does not require relocation static libraries static library when linking is performed during the creation of an executable or another object file it is known as static linking or early binding in this case the linking is usually done by a linker but may also be done by the compiler a static library also known as an archive is one intended to be statically linked originally only static libraries existed static linking must be performed when any modules are recompiled all of the modules required by a program are sometimes statically linked and copied into the executable file this process and the resulting standalone file is known as a static build of the program a static build may not need any further relocation if virtual memory is used and no address space layout randomization is desired shared libraries shared object redirects here for the synchronization mechanism see monitor synchronization a shared library or shared object is a file that is intended to be shared by executable files and further shared object files modules used by a program are loaded from individual shared objects into memory at load time or run time rather than being copied by a linker when it creates a single monolithic executable file for the program shared libraries can be statically linked meaning that references to the library modules are resolved and the modules are allocated memory when the executable file is created but often linking of shared libraries is postponed until they are loaded most modern operating systems can have shared library files of the same format as the executable files this offers two main advantages first it requires making only one loader for both of them rather than two having the single loader is considered well worth its added complexity secondly it allows the executables also to be used as shared libraries if they have a symbol table typical combined executable and shared library formats are elf and macho both in unix and pe windows in some older environments such as 16bit windows or mpe for the hp 3000 only stackbased data local was allowed in sharedlibrary code or other significant restrictions were placed on sharedlibrary code memory sharing shared memory interprocess communication library code may be shared in memory by multiple processes as well as on disk if virtual memory is used processes would execute the same physical page of ram that is mapped into the different address spaces of the processes this has advantages for instance on the openstep system applications were often only a few hundred kilobytes in size and loaded quickly the majority of their code was located in libraries that had already been loaded for other purposes by the operating system programs can accomplish ram sharing by using positionindependent code as in unix which leads to a complex but flexible architecture or by using common virtual addresses as in windows and os2 these systems make sure by various tricks like premapping the address space and reserving slots for each shared library that code has a great probability of being shared a third alternative is singlelevel store as used by the ibm system38 and its successors this allows positiondependent code but places no significant restrictions on where code can be placed or how it can be shared in some cases different versions of shared libraries can cause problems especially when libraries of different versions have the same file name and different applications installed on a system each require a specific version such a scenario is known as dll hell named after the windows and os2 dll file most modern operating systems after 2001 have cleanup methods to eliminate such situations or use applicationspecific private libraries dynamic linking dynamic linker dynamic linking or late binding is linking performed while a program is being loaded load time or executed run time rather than when the executable file is created a dynamically linked library dynamiclink library or dll under windows and os2 dynamic shared object or dso under unixlike systems is a library intended for dynamic linking only a minimal amount of work is done by the linker when the executable file is created it only records what library routines the program needs and the index names or numbers of the routines in the library the majority of the work of linking is done at the time the application is loaded load time or during execution run time usually the necessary linking program called a dynamic linker or linking loader is actually part of the underlying operating system however it is possible and not exceedingly difficult to write a program that uses dynamic linking and includes its own dynamic linker even for an operating system that itself provides no support for dynamic linking programmers originally developed dynamic linking in the multics operating system starting in 1964 and the mts michigan terminal system built in the late 1960s optimizations since shared libraries on most systems do not change often systems can compute a likely load address for each shared library on the system before it is needed and store that information in the libraries and executables if every shared library that is loaded has undergone this process then each will load at its predetermined address which speeds up the process of dynamic linking this optimization is known as prebinding in macos and prelinking in linux disadvantages of this technique include the time required to precompute these addresses every time the shared libraries change the inability to use address space layout randomization and the requirement of sufficient virtual address space for use a problem that will be alleviated by the adoption of 64bit architectures at least for the time being locating libraries at run time loaders for shared libraries vary widely in functionality some depend on the executable storing explicit paths to the libraries any change to the library naming or layout of the file system will cause these systems to fail more commonly only the name of the library and not the path is stored in the executable with the operating system supplying a method to find the library on disk based on some algorithm if a shared library that an executable depends on is deleted moved or renamed or if an incompatible version of the library is copied to a place that is earlier in the search the executable would fail to load this is called dependency hell existing on many platforms the infamous windows variant is commonly known as dll hell this problem cannot occur if each version of each library is uniquely identified and each program references libraries only by their full unique identifiers the dll hell problems with earlier windows versions arose from using only the names of libraries which were not guaranteed to be unique to resolve dynamic links in programs to avoid dll hell later versions of windows rely largely on options for programs to install private dllsessentially a partial retreat from the use of shared librariesalong with mechanisms to prevent replacement of shared system dlls with earlier versions of them microsoft windows microsoft windows checks the registry to determine the proper place to load dlls that implement com objects but for other dlls it will check the directories in a defined order first windows checks the directory where it loaded the program private dll applications written for the net framework framework since 2002 also check the global assembly cache as the primary store of shared dll files to remove the issue of dll hell openstep openstep used a more flexible system collecting a list of libraries from a number of known locations similar to the path concept when the system first starts moving libraries around causes no problems at all although users incur a time cost when first starting the system unixlike systems most unixlike systems have a search path specifying filesystem directories in which to look for dynamic libraries some systems specify the default path in a configuration file others hardcode it into the dynamic loader some executable file formats can specify additional directories in which to search for libraries for a particular program this can usually be overridden with an environment variable although it is disabled for setuid and setgid programs so that a user cant force such a program to run arbitrary code with root permissions developers of libraries are encouraged to place their dynamic libraries in places in the default search path on the downside this can make installation of new libraries problematic and these known locations quickly become home to an increasing number of library files making management more complex dynamic loading dynamic loading dynamic loading a subset of dynamic linking involves a dynamically linked library loading and unloading at run time on request such a request may be made implicitly at compile time or explicitly at run time implicit requests are made at compile time when a linker adds library references that include file paths or simply file names explicit requests are made when applications make direct calls to an operating systems api at run time most operating systems that support dynamically linked libraries also support dynamically loading such libraries via a runtime linker api for instance microsoft windows uses the api functions loadlibrary loadlibraryex freelibrary and getprocaddress with microsoft dynamic link libraries posixbased systems including most unix and unixlike systems use dlopen dlclose and dlsym some development systems automate this process object and class libraries although originally pioneered in the 1960s dynamic linking did not reach operating systems used by consumers until the late 1980s it was generally available in some form in most operating systems by the early 1990s during this same period objectoriented programming oop was becoming a significant part of the programming landscape oop with runtime binding requires additional information that traditional libraries dont supply in addition to the names and entry points of the code located within they also require a list of the objects they depend on this is a sideeffect of one of oops main advantages inheritance which means that parts of the complete definition of any method may be in different places this is more than simply listing that one library requires the services of another in a true oop system the libraries themselves may not be known at compile time and vary from system to system at the same time many developers worked on the idea of multitier programs in which a display running on a desktop computer would use the services of a mainframe or minicomputer for data storage or processing for instance a program on a guibased computer would send messages to a minicomputer to return small samples of a huge dataset for display remote procedure calls rpc already handled these tasks but there was no standard rpc system soon the majority of the minicomputer and mainframe vendors instigated projects to combine the two producing an oop library format that could be used anywhere such systems were known as object libraries or distributed objects if they supported remote access not all did microsofts com is an example of such a system for local use dcom a modified version that supports remote access for some time object libraries held the status of the next big thing in the programming world there were a number of efforts to create systems that would run across platforms and companies competed to try to get developers locked into their own system examples include ibms system object model somdsom sun microsystems distributed objects everywhere doe nexts portable distributed objects pdo digitals objectbroker microsofts component object model comdcom and any number of corbabased systems after the inevitable cooling of marketing hype object libraries continue to be used in both objectoriented programming and distributed information systems class libraries are the rough oop equivalent of older types of code libraries they contain classes which describe characteristics and define actions methods that involve objects class libraries are used to create instances or objects with their characteristics set to specific values in some oop languages like java the distinction is clear with the classes often contained in library files like javas jar file format and the instantiated objects residing only in memory although potentially able to be made persistent in separate files in others like smalltalk the class libraries are merely the starting point for a system image that includes the entire state of the environment classes and all instantiated objects remote libraries another solution to the library issue comes from using completely separate executables often in some lightweight form and calling them using a remote procedure call rpc over a network to another computer this approach maximizes operating system reuse the code needed to support the library is the same code being used to provide application support and security for every other program additionally such systems do not require the library to exist on the same machine but can forward the requests over the network however such an approach means that every library call requires a considerable amount of overhead rpc calls are much more expensive than calling a shared library that has already been loaded on the same machine this approach is commonly used in a distributed architecture that makes heavy use of such remote calls notably clientserver systems and application servers such as enterprise javabeans code generation libraries code generation libraries are highlevel apis that can generate or transform byte code for java they are used by aspectoriented programming some data access frameworks and for testing to generate dynamic proxy objects they also are used to intercept field access file naming most modern unixlike systems the system stores libfooa and libfooso files in directories such as lib usrlib or usrlocallib the filenames always start with lib and end with a suffix of a archive static library or of so shared object dynamically linked library some systems might have multiple names for the dynamically linked library with most of the names being names for symbolic links to the remaining name those names might include the major version of the library or the full version number for example on some systems libfooso2 would be the filename for the second major interface revision of the dynamically linked library libfoo the la files sometimes found in the library directories are libtool archives not usable by the system as such macos the system inherits static library conventions from bsd with the library stored in a a file and can use sostyle dynamically linked libraries with the dylib suffix instead most libraries in macos however consist of frameworks placed inside special directories called bundles which wrap the librarys required files and metadata for example a framework called myframework would be implemented in a bundle called myframeworkframework with myframeworkframeworkmyframework being either the dynamically linked library file or being a symlink to the dynamically linked library file in myframeworkframeworkversionscurrentmyframework microsoft windows dynamiclink libraries usually have the suffix dll although other file name extensions may identify specificpurpose dynamically linked libraries eg ocx for ole libraries the interface revisions are either encoded in the file names or abstracted away using comobject interfaces depending on how they are compiled lib files can be either static libraries or representations of dynamically linkable libraries needed only during compilation known as import libraries unlike in the unix world which uses different file extensions when linking against lib file in windows one must first know if it is a regular static library or an import library in the latter case a dll file must be present at run time code reuse linker computing loader computing dynamiclink library object file plugin prebinding static library runtime library visual component library vcl component library for cross platform clx lazarus component library lcl c standard library java class library framework class library generic programming used by the c standard library soname method stub notes shared libraries linkers and loaders by john r levine dynamic linking and loading linkers and loaders by john r levine article beginners guide to linkers by david drysdale article faster c program startups by improving runtime linking efficiency by lon bottou and john ryland how to create program libraries by baris simsek bfd the binary file descriptor library 1st librarycentric software design workshop lcsd05 at oopsla05 2nd librarycentric software design workshop lcsd06 at oopsla06 how to create shared library by ulrich drepper with much background info anatomy of linux dynamic libraries at ibmcom vteapplication binary interface abiparts andconventions alignment calling convention call stack library static machine code memory segmentation name mangling object code opaque pointer positionindependent code relocation system call virtual method table related topics binary code compatibility foreign function interface language binding linker dynamic loader year 2038 problem vteexecutable and object file formats aout aif coff cmd com ecoff elf goff hunk macho mz ne omf os360 pe pef xcoff comparison of formats exe authority control gnd 41215217 