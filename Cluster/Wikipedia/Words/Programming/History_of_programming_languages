history of programming languages for a detailed timeline of events see timeline of programming languages history of computing hardware hardware before 1960 hardware 1960s to present software software unix free software and opensource software computer science artificial intelligence compiler construction computer science operating systems programming languages prominent pioneers software engineering modern concepts generalpurpose cpus graphical user interface internet laptops personal computers video games world wide web by country bulgaria poland romania soviet bloc soviet union yugoslavia timeline of computing before 1950 19501979 19801989 19901999 20002009 20102019 more timelines glossary of computer science categoryvte the first highlevel programming language was plankalkl created by konrad zuse between 1942 and 1945 the first highlevel language to have an associated compiler was created by corrado bhm in 1951 for his phd thesis the first commercially available language was fortran formula translation developed in 1956 first manual appeared in 1956 but first developed in 1954 by a team led by john backus at ibm when fortran was first introduced it was treated with suspicion because of the belief that programs compiled from highlevel language would be less efficient than those written directly in machine code fortran became popular because it provided a means of porting existing code to new computers in a hardware market that was rapidly evolving the language eventually became known for its efficiency early history during 18421843 ada lovelace translated the memoir of italian mathematician francis maneclang about charles babbages newest proposed machine the analytical engine she supplemented the memoir with notes that specified in detail a method for calculating bernoulli numbers with the engine recognized by some historians as the worlds first computer program the first computer codes were specialized for their applications eg alonzo church was able to express the lambda calculus in a formulaic way and the turing machine was an abstraction of the operation of a tapemarking machine to some people some degree of expressive power and humanreadability is required before the status of programming language is granted jacquard looms and charles babbages difference engine both had simple extremely limited languages for describing the actions that these machines should perform first programming languages in the 1940s the first recognizably modern electrically powered computers were created the limited speed and memory capacity forced programmers to write hand tuned assembly language programs it was eventually realized that programming in assembly language required a great deal of intellectual effort the first programming languages designed to communicate instructions to a computer were written in the 1950s an early highlevel programming language to be designed for a computer was plankalkl developed by the germans for z1 by konrad zuse between 1943 and 1945 however it was not implemented until 1998 and 2000 john mauchlys short code proposed in 1949 was one of the first highlevel languages ever developed for an electronic computer unlike machine code short code statements represented mathematical expressions in understandable form however the program had to be translated into machine code every time it ran making the process much slower than running the equivalent machine code at the university of manchester alick glennie developed autocode in the early 1950s with the second iteration developed for the mark 1 by r a brooker in 1954 known as the mark 1 autocode brooker also developed an autocode for the ferranti mercury in the 1950s in conjunction with the university of manchester the version for the edsac 2 was devised by d f hartley of university of cambridge mathematical laboratory in 1961 known as edsac 2 autocode it was a straight development from mercury autocode adapted for local circumstances and was noted for its object code optimisation and sourcelanguage diagnostics which were advanced for the time a contemporary but separate thread of development atlas autocode was developed for the university of manchester atlas 1 machine in 1954 language fortran was invented at ibm by a team led by john backus it was the first widely used high level general purpose programming language to have a functional implementation as opposed to just a design on paper another early programming language was devised by grace hopper in the us called flowmatic it was developed for the univac i at remington rand during the period from 1955 until 1959 hopper found that business data processing customers were uncomfortable with mathematical notation and in early 1955 she and her team wrote a specification for an english programming language and implemented a prototype other languages still in use today include lisp 1958 invented by john mccarthy and cobol 1959 created by the short range committee another milestone in the late 1950s was the publication by a committee of american and european computer scientists of a new language for algorithms the algol 60 report the algorithmic language this report consolidated many ideas circulating at the time and featured three key language innovations nested block structure code sequences and associated declarations could be grouped into blocks without having to be turned into separate explicitly named procedures lexical scoping a block could have its own private variables procedures and functions invisible to code outside that block that is information hiding another innovation related to this was in how the language was described a mathematically exact notation backusnaur form bnf was used to describe the languages syntax nearly all subsequent programming languages have used a variant of bnf to describe the contextfree portion of their syntax algol 60 was particularly influential in the design of later languages some of which soon became more popular the burroughs large systems were designed to be programmed in an extended subset of algol algols key ideas were continued producing algol 68 syntax and semantics became even more orthogonal with anonymous routines a recursive typing system with higherorder functions etc not only the contextfree part but the full language syntax and semantics were defined formally in terms of van wijngaarden grammar a formalism designed specifically for this purpose algol 68s many littleused language features for example concurrent and parallel blocks and its complex system of syntactic shortcuts and automatic type coercions made it unpopular with implementers and gained it a reputation of being difficult niklaus wirth actually walked out of the design committee to create the simpler pascal language fortran some notable languages that were developed in this period include 1951 regional assembly language 1952 autocode 1954 ipl forerunner to lisp 1955 flowmatic led to cobol 1957 fortran first compiler 1957 comtran precursor to cobol 1958 lisp 1958 algol 58 1959 fact forerunner to cobol 1959 cobol 1959 rpg 1962 apl 1962 simula 1962 snobol 1963 cpl forerunner to c 1964 speakeasy computational environment 1964 basic 1964 pli 1966 joss 1967 bcpl forerunner to c establishing fundamental paradigms scheme the period from the late 1960s to the late 1970s brought a major flowering of programming languages most of the major language paradigms now in use were invented in this period speakeasy computational environment developed in 1964 at argonne national laboratory anl by stanley cohen is an oops objectoriented programming much like the later matlab idl programming language and mathematica numerical package speakeasy has a clear fortran foundation syntax it first addressed efficient physics computation internally at anl was modified for research use as modeleasy for the federal reserve board in the early 1970s and then was made available commercially speakeasy and modeleasy are still in use currently simula invented in the late 1960s by nygaard and dahl as a superset of algol 60 was the first language designed to support objectoriented programming c an early systems programming language was developed by dennis ritchie and ken thompson at bell labs between 1969 and 1973 smalltalk mid1970s provided a complete groundup design of an objectoriented language prolog designed in 1972 by colmerauer roussel and kowalski was the first logic programming language ml built a polymorphic type system invented by robin milner in 1973 on top of lisp pioneering statically typed functional programming languages each of these languages spawned an entire family of descendants and most modern languages count at least one of them in their ancestry the 1960s and 1970s also saw considerable debate over the merits of structured programming which essentially meant programming without the use of goto a significant fraction of programmers believed that even in languages that provide goto it is bad programming style to use it except in rare circumstances this debate was closely related to language design some languages did not include a goto at all which forced structured programming on the programmer to provide even faster compile times some languages were structured for onepass compilers which expect subordinate routines to be defined first as with pascal where the main routine or driver function is the final section of the program listing some notable languages that were developed in this period include 1968 logo 1969 b forerunner to c 1970 pascal 1970 forth 1972 c 1972 smalltalk 1972 prolog 1973 ml 1975 scheme 1978 sql a query language later extended 1980s consolidation modules performance matlab erlang tcl the 1980s were years of relative consolidation in imperative languages rather than inventing new paradigms all of these movements elaborated upon the ideas invented in the previous decade c combined objectoriented and systems programming the united states government standardized ada a systems programming language intended for use by defense contractors in japan and elsewhere vast sums were spent investigating socalled fifthgeneration programming languages that incorporated logic programming constructs the functional languages community moved to standardize ml and lisp research in miranda a functional language with lazy evaluation began to take hold in this decade one important new trend in language design was an increased focus on programming for largescale systems through the use of modules or largescale organizational units of code modula ada and ml all developed notable module systems in the 1980s module systems were often wedded to generic programming constructsgenerics being in essence parametrized modules see also polymorphism in objectoriented programming although major new paradigms for imperative programming languages did not appear many researchers expanded on the ideas of prior languages and adapted them to new contexts for example the languages of the argus and emerald systems adapted objectoriented programming to distributed systems the 1980s also brought advances in programming language implementation the risc movement in computer architecture postulated that hardware should be designed for compilers rather than for human assembly programmers aided by processor speed improvements that enabled increasingly aggressive compilation techniques the risc movement sparked greater interest in compilation technology for highlevel languages language technology continued along these lines well into the 1990s some notable languages that were developed in this period include 1980 c as c with classes renamed in1983 1983 ada 1984 common lisp 1984 matlab 1984 dbase iii dbase iii plus clipper and foxpro as foxbase later developing into visual foxpro 1985 eiffel 1986 objectivec 1986 labview visual programming language 1986 erlang 1987 perl 1988 tcl 1988 wolfram language as part of mathematica only got a separate name in june 2013 1989 fl backus 1990s the internet age haskell lua php rebol the rapid growth of the internet in the mid1990s was the next major historic event in programming languages by opening up a radically new platform for computer systems the internet created an opportunity for new languages to be adopted in particular the javascript programming language rose to popularity because of its early integration with the netscape navigator web browser various other scripting languages achieved widespread use in developing customized applications for web servers such as php the 1990s saw no fundamental novelty in imperative languages but much recombination and maturation of old ideas this era began the spread of functional languages a big driving philosophy was programmer productivity many rapid application development rad languages emerged which usually came with an ide garbage collection and were descendants of older languages all such languages were objectoriented these included object pascal visual basic and java java in particular received much attention more radical and innovative than the rad languages were the new scripting languages these did not directly descend from other languages and featured new syntaxes and more liberal incorporation of features many consider these scripting languages to be more productive than even the rad languages but often because of choices that make small programs simpler but large programs more difficult to write and maintain nevertheless scripting languages came to be the most prominent ones used in connection with the web some notable languages that were developed in this period include 1990 haskell 1991 python 1991 visual basic 1993 lua 1993 r 1994 clos part of ansi common lisp 1995 ruby 1995 ada 95 1995 java 1995 delphi object pascal 1995 javascript 1995 php 1997 rebol current trends programming language evolution continues in both industry and research some of the recent trends have included d programming language groovy rust scratch swift increasing support for functional programming in mainstream languages used commercially including pure functional programming for making code easier to reason about and easier to parallelise at both micro and macro levels constructs to support concurrent and distributed programming mechanisms for adding security and reliability verification to the language extended static checking dependent typing information flow control static thread safety alternative mechanisms for composability and modularity mixins traits typeclasses delegates aspects componentoriented software development metaprogramming reflection or access to the abstract syntax tree aop or aspect oriented programming allowing developers to insert code in another module or class at join points domain specific languages and code generation xml for graphical interface xul xaml increased interest in distribution and mobility integration with databases including xml and relational databases open source as a developmental philosophy for languages including the gnu compiler collection and languages such as python ruby and scala massively parallel languages for coding 2000 processor gpu graphics processing units and supercomputer arrays including opencl early research into asyetunimplementable quantum computing programming languages more interest in visual programming languages like scratch some notable languages developed during this period include 2000 actionscript 2001 c 2001 d 2002 scratch 2003 groovy 2003 scala 2005 f 2006 powershell 2007 clojure 2009 go 2010 rust 2011 dart 2011 kotlin 2011 red 2011 elixir 2012 julia 2014 swift 2016 ring prominent people anders hejlsberg yukihiro matsumoto grace m hopper bjarne stroustrup niklaus wirth some key people who helped develop programming languages alan cooper developer of visual basic alan kay pioneering work on objectoriented programming and originator of smalltalk anders hejlsberg developer of turbo pascal delphi c and typescript bertrand meyer inventor of eiffel bjarne stroustrup developer of c brian kernighan coauthor of the first book on the c programming language with dennis ritchie coauthor of the awk and ampl programming languages chris lattner creator of swift and llvm dennis ritchie inventor of c unix operating system plan 9 operating system grace hopper first to use the term compiler and developer of flowmatic influenced development of cobol popularized machineindependent programming languages and the term debugging guido van rossum creator of python james gosling lead developer of java and its precursor oak jean ichbiah chief designer of ada ada 83 jeanyves girard coinventor of the polymorphic lambda calculus system f jeff bezanson main designer and one of the core developers of julia joe armstrong creator of erlang john backus inventor of fortran and cooperated in the design of algol 58 and algol 60 john c reynolds coinventor of the polymorphic lambda calculus system f john mccarthy inventor of lisp john von neumann originator of the operating system concept graydon hoare inventor of rust ken thompson inventor of b go programming language inferno programming language and unix operating system coauthor kenneth e iverson developer of apl and codeveloper of j along with roger hui konrad zuse designed the first highlevel programming language plankalkl which influenced algol 58 kristen nygaard pioneered objectoriented programming coinvented simula larry wall creator of the perl programming language see perl and perl 6 martin odersky creator of scala and previously a contributor to the design of java nathaniel rochester inventor of first assembler ibm 701 niklaus wirth inventor of pascal modula and oberon olejohan dahl pioneered objectoriented programming coinvented simula rasmus lerdorf creator of php rich hickey creator of clojure robin milner inventor of ml and sharing credit for hindleymilner polymorphic type inference stephen wolfram creator of mathematica tom love and brad cox creator of objectivec walter bright creator of d yukihiro matsumoto creator of ruby acm sigplan history of programming languages conference history of compiler writing history of computing hardware programming language timeline of computing timeline of programming languages list of programming languages list of programmers rosen saul editor programming systems and languages mcgrawhill 1967 sammet jean e programming languages history and fundamentals prenticehall 1969 sammet jean e july 1972 programming languages history and future communications of the acm 15 7 601610 doi101145361454361485 richard l wexelblat ed history of programming languages academic press 1981 thomas j bergin and richard g gibson eds history of programming languages addison wesley 1996 history and evolution of programming languages graph of programming language history vteprogramming languages comparison timeline history apl assembly basic c c c cobol fortran go groovy haskell java javascript js kotlin lisp lua objectivec pascal perl php python ruby rust shell smalltalk swift visual basic net vbnet more category lists alphabetical categorical generational nonenglishbased 