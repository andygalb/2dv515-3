software portability not to be confused with application portability this article is about portability in itself for the work required to make software portable see porting for other uses see portability portability in highlevel computer programming is the usability of the same software in different environments the prerequirement for portability is the generalized abstraction between the application logic and system interfaces when software with the same functionality is produced for several computing platforms portability is the key issue for development cost reduction strategies for portability software portability may involve transferring installed program files to another computer of basically the same architecture reinstalling a program from distribution files on another computer of basically the same architecture building executable programs for different platforms from source code this is what is usually understood by porting similar systems when operating systems of the same family are installed on two computers with processors with similar instruction sets it is often possible to transfer the files implementing program files between them in the simplest case the file or files may simply be copied from one machine to the other however in many cases the software is installed on a computer in a way which depends upon its detailed hardware software and setup with device drivers for particular devices using installed operating system and supporting software components and using different drives or directories in some cases software usually described as portable software is specifically designed to run on different computers with compatible operating systems and processors without any machinedependent installation it is sufficient to transfer specified directories and their contents software installed on portable mass storage devices such as usb sticks can be used on any compatible computer on simply plugging the storage device in and stores all configuration information on the removable device hardware and softwarespecific information is often stored in configuration files in specified locations eg the registry on machines running microsoft windows software which is not portable in this sense will have to be transferred with modifications to support the environment on the destination machine different processors as of 2011 the majority of desktop and laptop computers used microprocessors compatible with the 32 and 64bit x86 instruction sets smaller portable devices use processors with different and incompatible instruction sets such as arm the difference between larger and smaller devices is such that detailed software operation is different an application designed to display suitably on a large screen cannot simply be ported to a pocketsized smartphone with a tiny screen even if the functionality is similar web applications are required to be processor independent so portability can be achieved by using web programming techniques writing in javascript such a program can run in a common web browser such web applications must for security reasons have limited control over the host computer especially regarding reading and writing files nonweb programs installed upon a computer in the normal manner can have more control and yet achieve system portability by linking to portable libraries that provides the same interface on different systems source code portability software can be compiled and linked from source code for different operating systems and processors if written in a programming language supporting compilation for the platforms this is usually a task for the program developers typical users have neither access to the source code nor the required skills in opensource environments such as linux the source code is available to all in earlier days source code was often distributed in a standardised format and could be built into executable code with a standard make tool for any particular system by moderately knowledgeable users if no errors occurred during the build some linux distributions distribute software to users in source form in these cases there is usually no need for detailed adaptation of the software for the system it is distributed in a way which modifies the compilation process to match the system effort to port source code even with seemingly portable languages like c and c the effort to port source code can vary considerably the authors of unix32v 1979 reported that sometimes the effort consists of recompiling the source code but sometimes it is necessary to rewrite major parts of the software many language specifications describe implementation defined behaviour eg right shifting a signed integer in c can do a logical or an arithmetic shift operating system functions or third party libraries might not be available on the target system some functions can be available on a target system but exhibit slightly different behaviour eg utime fails under windows with eacces when it is called for a directory the program code itself can also contain unportable things like the paths of include files drive letters and the backslash as path delimiter are not accepted on all operating systems implementation defined things like byte order and the size of an int can also raise the porting effort in practice the claim of languages like c and c to have the woca write once compile anywhere is arguable crossplatform software hardwaredependent software c programming language language interoperability portability testing sourcetosource compiler mooney 1997 bringing portability to the software process pdf west virginia university dept of statistics and computer science archived from the original pdf on 20080725 retrieved 20080317mwparseroutput citecitationfontstyleinheritmwparseroutput qquotesmwparseroutput codecs1codecolorinheritbackgroundinheritborderinheritpaddinginheritmwparseroutput cs1lockfree abackgroundurluploadwikimediaorgwikipediacommonsthumb665lockgreensvg9pxlockgreensvgpngnorepeatbackgroundpositionright 1em centermwparseroutput cs1locklimited amwparseroutput cs1lockregistration abackgroundurluploadwikimediaorgwikipediacommonsthumbdd6lockgrayalt2svg9pxlockgrayalt2svgpngnorepeatbackgroundpositionright 1em centermwparseroutput cs1locksubscription abackgroundurluploadwikimediaorgwikipediacommonsthumbaaalockredalt2svg9pxlockredalt2svgpngnorepeatbackgroundpositionright 1em centermwparseroutput cs1subscriptionmwparseroutput cs1registrationcolor555mwparseroutput cs1subscription spanmwparseroutput cs1registration spanborderbottom1px dottedcursorhelpmwparseroutput cs1hiddenerrordisplaynonefontsize100mwparseroutput cs1visibleerrorfontsize100mwparseroutput cs1subscriptionmwparseroutput cs1registrationmwparseroutput cs1formatfontsize95mwparseroutput cs1kernleftmwparseroutput cs1kernwlleftpaddingleft02emmwparseroutput cs1kernrightmwparseroutput cs1kernwlrightpaddingright02em garen 2007 software portability weighing options making choices the cpa journal 77 11 3 lehey 1995 porting unix software from download to debug pdf retrieved 20100527 