performance engineering performance engineering encompasses the techniques applied during a systems development life cycle to ensure the nonfunctional requirements for performance such as throughput latency or memory usage will be met it may be alternatively referred to as systems performance engineering within systems engineering and software performance engineering or application performance engineering within software engineering as the connection between application success and business success continues to gain recognition particularly in the mobile space application performance engineering has taken on a preventative and perfective role within the software development life cycle as such the term is typically used to describe the processes people and technologies required to effectively test nonfunctional requirements ensure adherence to service levels and optimize application performance prior to deployment the term performance engineering encompasses more than just the software and supporting infrastructure and as such the term performance engineering is preferable from a macro view adherence to the nonfunctional requirements is also validated postdeployment by monitoring the production systems this is part of it service management see also itil performance engineering has become a separate discipline at a number of large corporations with tasking separate but parallel to systems engineering it is pervasive involving people from multiple organizational units but predominantly within the information technology organization performance engineering objectives increase business revenue by ensuring the system can process transactions within the requisite timeframe eliminate system failure requiring scrapping and writing off the system development effort due to performance objective failure eliminate late system deployment due to performance issues eliminate avoidable system rework due to performance issues eliminate avoidable system tuning efforts avoid additional and unnecessary hardware acquisition costs reduce increased software maintenance costs due to performance problems in production reduce increased software maintenance costs due to software impacted by ad hoc performance fixes reduce additional operational overhead for handling system issues due to performance problems identify future bottlenecks by simulation over prototype increase server capability performance engineering approach because this discipline is applied within multiple methodologies the following activities will occur within differently specified phases however if the phases of the rational unified process rup are used as a framework then the activities will occur as follows during the first conceptual phase of a program or project critical business processes are identified typically they are classified as critical based upon revenue value cost savings or other assigned business value this classification is done by the business unit not the it organization high level risks that may impact system performance are identified and described at this time an example might be known performance risks for a particular vendor system finally performance activities roles and deliverables are identified for the elaboration phase activities and resource loading are incorporated into the elaboration phase project plans elaboration during this defining phase the critical business processes are decomposed to critical use cases probe cases will be decomposed further as needed to single page screen transitions these are the use cases that will be subjected to script driven performance testing the type of requirements that relate to performance engineering are the nonfunctional requirements or nfr while a functional requirement relates to which business operations are to be performed a performance related nonfunctional requirement will relate to how fast that business operation performs under defined circumstances construction early in this phase a number of performance tool related activities are required these include identify key development team members as subject matter experts for the selected tools specify a profiling tool for the developmentcomponent unit test environment specify an automated unit component performance test tool for the developmentcomponent unit test environment this is used when no gui yet exists to drive the components under development specify an automated tool for driving serverside unit components for the developmentcomponent unit test environment specify an automated multiuser capable scriptdriven endtoend tool for the developmentcomponent unit test environment this is used to execute screendriven use cases identify a database test data load tool for the developmentcomponent unit test environment this is required to ensure that the database optimizer chooses correct execution paths and to enable reinitializing and reloading the database as needed deploy the performance tools for the development team presentations and training must be given to development team members on the selected tools the performance test team normally does not execute performance tests in the development environment but rather in a specialized predeployment environment that is configured to be as close as possible to the planned production environment this team will execute performance testing against test cases validating that the critical use cases conform to the specified nonfunctional requirements the team will execute load testing against a normally expected median load as well as a peak load they will often run stress tests that will identify the system bottlenecks the data gathered and the analysis will be fed back to the group that does performance tuning where necessary the system will be tuned to bring nonconforming tests into conformance with the nonfunctional requirements if performance engineering has been properly applied at each iteration and phase of the project to this point hopefully this will be sufficient to enable the system to receive performance certification however if for some reason perhaps proper performance engineering working practices were not applied there are tests that cannot be tuned into compliance then it will be necessary to return portions of the system to development for refactoring in some cases the problem can be resolved with additional hardware but adding more hardware leads quickly to diminishing returns transition during this final phase the system is deployed to the production environment a number of preparatory steps are required these include configuring the operating systems network servers application web database load balancer etc and any message queueing software according to the base checklists and the optimizations identified in the performance test environment ensuring all performance monitoring software is deployed and configured running statistics on the database after the production data load is completed once the new system is deployed ongoing operations pick up performance activities including validating that weekly and monthly performance reports indicate that critical use cases perform within the specified non functional requirement criteria where use cases are falling outside of nfr criteria submit defects identify projected trends from monthly and quarterly reports and on a quarterly basis execute capacity planning management activities service management in the operational domain post production deployment performance engineering focuses primarily within three areas service level management capacity management and problem management service level management in the service level management area performance engineering is concerned with service level agreements and the associated systems monitoring that serves to validate service level compliance detect problems and identify trends for example when real user monitoring is deployed it is possible to ensure that user transactions are being executed in conformance with specified nonfunctional requirements transaction response time is logged in a database such that queries and reports can be run against the data this permits trend analysis that can be useful for capacity management when user transactions fall out of band the events should generate alerts so that attention may be applied to the situation capacity management for capacity management performance engineering focuses on ensuring that the systems will remain within performance compliance this means executing trend analysis on historical monitoring generated data such that the future time of non compliance is predictable for example if a system is showing a trend of slowing transaction processing which might be due to growing data set sizes or increasing numbers of concurrent users or other factors then at some point the system will no longer meet the criteria specified within the service level agreements capacity management is charged with ensuring that additional capacity is added in advance of that point additional cpus more memory new database indexing et cetera so that the trend lines are reset and the system will remain within the specified performance range problem management within the problem management domain the performance engineering practices are focused on resolving the root cause of performance related problems these typically involve system tuning changing operating system or device parameters or even refactoring the application software to resolve poor performance due to poor design or bad coding practices monitoring to ensure that there is proper feedback validating that the system meets the nfr specified performance metrics any major system needs a monitoring subsystem the planning design installation configuration and control of the monitoring subsystem are specified by an appropriately defined monitoring process the benefits are as follows it is possible to establish service level agreements at the use case level it is possible to turn on and turn off monitoring at periodic points or to support problem resolution it enables the generation of regular reports it enables the ability to track trends over time such as the impact of increasing user loads and growing data sets on use case level performance the trend analysis component of this cannot be undervalued this functionality properly implemented will enable predicting when a given application undergoing gradually increasing user loads and growing data sets will exceed the specified non functional performance requirements for a given use case this permits proper management budgeting acquisition of and deployment of the required resources to keep the system running within the parameters of the non functional performance requirements java performance scalability software quality software testing web performance this article needs additional citations for verification please help improve this article by adding citations to reliable sources unsourced material may be challenged and removed march 2009 learn how and when to remove this template message database performance tuning guide practical performance analyst performance engineering community body of knowledge performance engineering methodology a performance engineering strategy a performance process maturity model the every computer performance book exploring uml for performance engineering introduction to modeling based performance engineering leveraging itil to improve application performance patterns practices performance engineering performance and scalability of distributed software architectures performance engineering best practices high level software engineering and performance a roadmap the vicious cycle of computer systems performance and it operational costs microsoft windows server performance team gathering performance requirements performance testing web services strategies and best practices performance evaluation of an air traffic control system using the application response measurement arm standard integration of performance management in information technology infrastructure library itil vtesystems engineeringsubfields aerospace engineering biological systems engineering configuration management earth systems engineering and management electrical engineering enterprise systems engineering performance engineering reliability engineering safety engineering processes requirements engineering functional specification system integration verification and validation design review concepts business process system system lifecycle vmodel systems development life cycle tools decisionmaking function modelling idef optimization quality function deployment system dynamics systems modeling language systems analysis systems modeling work breakdown structure people james s albus ruzena bajcsy benjamin s blanchard wernher von braun kathleen carley harold chestnut wolt fabrycky barbara grosz arthur david hall iii derek hitchins robert e machol radhika nagpal simon ramo joseph francis shea katia sycara manuela m veloso john n warfield related fields control engineering computer engineering industrial engineering operations research project management quality management risk management software engineering category 