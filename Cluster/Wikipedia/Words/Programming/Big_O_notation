big o notation fit approximationconceptsorders of approximationscale analysis big o notationcurve fitting false precisionsignificant figuresother fundamentalsapproximation generalization errortaylor polynomialscientific modellingvte example of big o notation fx ogx as there exists c0 eg c1 and x0 eg x05 such that fxcgx whenever xx0 big o notation is a mathematical notation that describes the limiting behavior of a function when the argument tends towards a particular value or infinity it is a member of a family of notations invented by paul bachmann and others collectively called bachmannlandau notation or asymptotic notation in computer science big o notation is used to classify algorithms according to how their running time or space requirements grow as the input size grows in analytic number theory big o notation is often used to express a bound on the difference between an arithmetical function and a better understood approximation a famous example of such a difference is the remainder term in the prime number theorem big o notation characterizes functions according to their growth rates different functions with the same growth rate may be represented using the same o notation the letter o is used because the growth rate of a function is also referred to as the order of the function a description of a function in terms of big o notation usually only provides an upper bound on the growth rate of the function associated with big o notation are several related notations using the symbols o and to describe other kinds of bounds on asymptotic growth rates big o notation is also used in many other fields to provide similar estimates formal definition let f be a real or complex valued function and g a real valued function both defined on some unbounded subset of the real positive numbers such that gx is strictly positive for all large enough values of x one writes f x o g x as x displaystyle fxogxtext as xto infty if and only if for all sufficiently large values of x the absolute value of fx is at most a positive constant multiple of gx that is fxogx if and only if there exists a positive real number m and a real number x0 such that f x m g x for all x x 0 displaystyle fxleq mgxtext for all xgeq x0 in many contexts the assumption that we are interested in the growth rate as the variable x goes to infinity is left unstated and one writes more simply that f x o g x displaystyle fxogx the notation can also be used to describe the behavior of f near some real number a often a0 we say f x o g x as x a displaystyle fxogxtext as xto a if and only if there exist positive numbers and m such that f x m g x when 0 x a displaystyle fxleq mgxtext when 0xadelta as gx is chosen to be nonzero for values of x sufficiently close to a both of these definitions can be unified using the limit superior f x o g x as x a displaystyle fxogxtext as xto a if and only if limsup x a f x g x displaystyle limsup xto aleftfrac fxgxrightinfty example in typical usage the formal definition of o notation is not used directly rather the o notation for a function f is derived by the following simplification rules if fx is a sum of several terms if there is one with largest growth rate it can be kept and all others omitted if fx is a product of several factors any constants terms in the product that do not depend on x can be omitted for example let fx 6x42x35 and suppose we wish to simplify this function using o notation to describe its growth rate as x approaches infinity this function is the sum of three terms 6x4 2x3 and 5 of these three terms the one with the highest growth rate is the one with the largest exponent as a function of x namely 6x4 now one may apply the second rule 6x4 is a product of 6 and x4 in which the first factor does not depend on x omitting this factor results in the simplified form x4 thus we say that fx is a bigoh of x4 mathematically we can write fxox4 one may confirm this calculation using the formal definition let fx6x42x35 and gxx4 applying the formal definition from above the statement that fxox4 is equivalent to its expansion f x m x 4 displaystyle fxleq mx4 for some suitable choice of x0 and m and for all xx0 to prove this let x01 and m13 then for all xx0 6 x 4 2 x 3 5 6 x 4 2 x 3 5 6 x 4 2 x 4 5 x 4 13 x 4 displaystyle beginaligned6x42x35leq 6x42x35leq 6x42x45x413x4endaligned so 6 x 4 2 x 3 5 13 x 4 displaystyle 6x42x35leq 13x4 usage big o notation has two main areas of application in mathematics it is commonly used to describe how closely a finite series approximates a given function especially in the case of a truncated taylor series or asymptotic expansion in computer science it is useful in the analysis of algorithms in both applications the function gx appearing within the o is typically chosen to be as simple as possible omitting constant factors and lower order terms there are two formally close but noticeably different usages of this notation infinite asymptotics infinitesimal asymptotics this distinction is only in application and not in principle howeverthe formal definition for the big o is the same for both cases only with different limits for the function argument infinite asymptotics graphs of functions commonly used in the analysis of algorithms showing the number of operations n versus input size n for each function big o notation is useful when analyzing algorithms for efficiency for example the time or the number of steps it takes to complete a problem of size n might be found to be tn 4n2 2n 2 as n grows large the n2 term will come to dominate so that all other terms can be neglectedfor instance when n 500 the term 4n2 is 1000 times as large as the 2n term ignoring the latter would have negligible effect on the expressions value for most purposes further the coefficients become irrelevant if we compare to any other order of expression such as an expression containing a term n3 or n4 even if tn 1000000n2 if un n3 the latter will always exceed the former once n grows larger than 1000000 t1000000 10000003 u1000000 additionally the number of steps depends on the details of the machine model on which the algorithm runs but different types of machines typically vary by only a constant factor in the number of steps needed to execute an algorithm so the big o notation captures what remains we write either t n o n 2 displaystyle tnon2 or t n o n 2 displaystyle tnin on2 and say that the algorithm has order of n2 time complexity note that is not meant to express is equal to in its normal mathematical sense but rather a more colloquial is so the second expression is sometimes considered more accurate see the equals sign discussion below while the first is considered by some as an abuse of notation infinitesimal asymptotics big o can also be used to describe the error term in an approximation to a mathematical function the most significant terms are written explicitly and then the leastsignificant terms are summarized in a single big o term consider for example the exponential series and two expressions of it that are valid when x is small e x 1 x x 2 2 x 3 3 x 4 4 for all x 1 x x 2 2 o x 3 as x 0 1 x o x 2 as x 0 displaystyle beginalignedex1xfrac x22frac x33frac x44dotsb textfor all x1xfrac x22ox3textas xto 01xox2textas xto 0endaligned the second expression the one with ox3 means the absolutevalue of the error ex 1 x x22 is at most some constant times x3 when x is close enough to0 properties if the function f can be written as a finite sum of other functions then the fastest growing one determines the order of fn for example f n 9 log n 5 log n 3 3 n 2 2 n 3 o n 3 as n displaystyle fn9log n5log n33n22n3on3qquad textas nto infty in particular if a function may be bounded by a polynomial in n then as n tends to infinity one may disregard lowerorder terms of the polynomial another thing to notice is the sets onc and ocn are very different if c is greater than one then the latter grows much faster a function that grows faster than nc for any c is called superpolynomial one that grows more slowly than any exponential function of the form cn is called subexponential an algorithm can require time that is both superpolynomial and subexponential examples of this include the fastest known algorithms for integer factorization and the function nlog n we may ignore any powers of n inside of the logarithms the set olog n is exactly the same as olognc the logarithms differ only by a constant factor since lognc c log n and thus the big o notation ignores that similarly logs with different constant bases are equivalent on the other hand exponentials with different bases are not of the same order for example 2n and 3n are not of the same order changing units may or may not affect the order of the resulting algorithm changing units is equivalent to multiplying the appropriate variable by a constant wherever it appears for example if an algorithm runs in the order of n2 replacing n by cn means the algorithm runs in the order of c2n2 and the big o notation ignores the constant c2 this can be written as c2n2 on2 if however an algorithm runs in the order of 2n replacing n with cn gives 2cn 2cn this is not equivalent to 2n in general changing variables may also affect the order of the resulting algorithm for example if an algorithms run time is on when measured in terms of the number n of digits of an input number x then its run time is olog x when measured as a function of the input number x itself because n olog x product f 1 o g 1 and f 2 o g 2 f 1 f 2 o g 1 g 2 displaystyle f1og1text and f2og2rightarrow f1f2og1g2 f o g o f g displaystyle fcdot ogofg sum f 1 o g 1 and f 2 o g 2 f 1 f 2 o g 1 g 2 displaystyle f1og1text and f2og2rightarrow f1f2og1g2 this implies f 1 o g and f 2 o g f 1 f 2 o g displaystyle f1ogtext and f2ogrightarrow f1f2in og which means that o g displaystyle og is a convex cone multiplication by a constant let k be constant then o k g o g displaystyle okgog if k is nonzero f o g k f o g displaystyle fogrightarrow kfog multiple variables big o and little o and can also be used with multiple variables to define big o formally for multiple variables suppose f displaystyle f and g displaystyle g are two functions defined on some subset of r n displaystyle mathbb r n we say f x is o g x as x displaystyle fvec xtext is ogvec xtext as vec xto infty if and only if m c 0 such that for all x with x i m for some i f x c g x displaystyle exists mexists c0text such that for all vec xtext with xigeq mtext for some ifvec xleq cgvec x equivalently the condition that x i m displaystyle xigeq m for some i displaystyle i can be replaced with the condition that x m displaystyle vec xinfty geq m where x displaystyle vec xinfty denotes the chebyshev norm for example the statement f n m n 2 m 3 o n m as n m displaystyle fnmn2m3onmtext as nmto infty asserts that there exist constants c and m such that n m m g n m c n m displaystyle forall nminfty geq mgnmleq cnm where gnm is defined by f n m n 2 m 3 g n m displaystyle fnmn2m3gnm note that this definition allows all of the coordinates of x displaystyle vec x to increase to infinity in particular the statement f n m o n m as n m displaystyle fnmonmtext as nmto infty ie c m n m displaystyle exists cexists mforall nforall mdots is quite different from m f n m o n m as n displaystyle forall mcolon fnmonmtext as nto infty ie m c m n displaystyle forall mexists cexists mforall ndots note that under this definition the subset on which a function is defined is significant when generalizing statements from the univariate setting to the multivariate setting for example if f n m 1 displaystyle fnm1 and g n m n displaystyle gnmn then f n m o g n m displaystyle fnmognm if we restrict f displaystyle f and g displaystyle g to 1 2 displaystyle 1infty 2 but not if they are defined on 0 2 displaystyle 0infty 2 this is not the only generalization of big o to multivariate functions and in practice there is some inconsistency in the choice of definition matters of notation equals sign the statement fx is ogx as defined above is usually written as fxogx some consider this to be an abuse of notation since the use of the equals sign could be misleading as it suggests a symmetry that this statement does not have as de bruijn says oxox2 is true but ox2ox is not for these reasons it would be more precise to use set notation and write fxogx thinking of ogx as the class of all functions hx such that hxcgx for some constant c other arithmetic operators big o notation can also be used in conjunction with other arithmetic operators in more complicated equations for example hx ofx denotes the collection of functions having the growth of hx plus a part whose growth is limited to that of fx thus g x h x o f x displaystyle gxhxofx expresses the same as g x h x o f x displaystyle gxhxofx example suppose an algorithm is being developed to operate on a set of n elements its developers are interested in finding a function tn that will express how long the algorithm will take to run in some arbitrary measurement of time in terms of the number of elements in the input set the algorithm works by first calling a subroutine to sort the elements in the set and then perform its own operations the sort has a known time complexity of on2 and after the subroutine runs the algorithm must take an additional 55n32n10 steps before it terminates thus the overall time complexity of the algorithm can be expressed as tn 55n3on2 here the terms 2n10 are subsumed within the fastergrowing on2 again this usage disregards some of the formal meaning of the symbol but it does allow one to use the big o notation as a kind of convenient placeholder multiple usages in more complicated usage o can appear in different places in an equation even several times on each side for example the following are true for n displaystyle nto infty n 1 2 n 2 o n displaystyle n12n2on n o n 1 2 n o log n 2 n 3 o n 5 2 displaystyle non12nolog n2n3on52 n o 1 o e n displaystyle no1oen the meaning of such statements is as follows for any functions which satisfy each o on the left side there are some functions satisfying each o on the right side such that substituting all these functions into the equation makes the two sides equal for example the third equation above means for any function fn o1 there is some function gn oen such that nfn gn in terms of the set notation above the meaning is that the class of functions represented by the left side is a subset of the class of functions represented by the right side in this use the is a formal symbol that unlike the usual use of is not a symmetric relation thus for example no1 oen does not imply the false statement oen no1 typesetting big o consists of just an uppercase o unlike greeknamed bachmannlandau notations it needs no special symbol yet commonly used calligraphic variants like o displaystyle mathcal o are available in latex and derived typesetting systems orders of common functions further information time complexity table of common time complexities here is a list of classes of functions that are commonly encountered when analyzing the running time of an algorithm in each case c is a positive constant and n increases without bound the slowergrowing functions are generally listed first notation name example o 1 displaystyle o1 constant determining if a binary number is even or odd calculating 1 n displaystyle 1n using a constantsize lookup table o log log n displaystyle olog log n double logarithmic number of comparisons spent finding an item using interpolation search in a sorted array of uniformly distributed values o log n displaystyle olog n logarithmic finding an item in a sorted array with a binary search or a balanced search tree as well as all operations in a binomial heap o log n c displaystyle olog nc c 1 displaystyle scriptstyle c1 polylogarithmic matrix chain ordering can be solved in polylogarithmic time on a parallel randomaccess machine o n c displaystyle onc 0 c 1 displaystyle scriptstyle 0c1 fractional power searching in a kd tree o n displaystyle on linear finding an item in an unsorted list or in an unsorted array adding two nbit integers by ripple carry o n log n displaystyle onlog n n logstar n performing triangulation of a simple polygon using seidels algorithm or the unionfind algorithm note that log n 0 if n 1 1 log log n if n 1 displaystyle log nbegincases0textif nleq 11log log ntextif n1endcases o n log n o log n displaystyle onlog nolog n linearithmic loglinear or quasilinear performing a fast fourier transform fastest possible comparison sort heapsort and merge sort o n 2 displaystyle on2 quadratic multiplying two ndigit numbers by a simple algorithm simple sorting algorithms such as bubble sort selection sort and insertion sort worst case bound on some usually faster sorting algorithms such as quicksort shellsort and tree sort o n c displaystyle onc polynomial or algebraic treeadjoining grammar parsing maximum matching for bipartite graphs finding the determinant with lu decomposition l n c e c o 1 ln n ln ln n 1 displaystyle lneco1ln nalpha ln ln n1alpha 0 1 displaystyle scriptstyle 0alpha 1 lnotation or subexponential factoring a number using the quadratic sieve or number field sieve o c n displaystyle ocn c 1 displaystyle scriptstyle c1 exponential finding the exact solution to the travelling salesman problem using dynamic programming determining if two logical statements are equivalent using bruteforce search o n displaystyle on factorial solving the travelling salesman problem via bruteforce search generating all unrestricted permutations of a poset finding the determinant with laplace expansion enumerating all partitions of a set the statement f n o n displaystyle fnon is sometimes weakened to f n o n n displaystyle fnoleftnnright to derive simpler formulas for asymptotic complexity for any k 0 displaystyle k0 and c 0 displaystyle c0 o n c log n k displaystyle onclog nk is a subset of o n c displaystyle oncvarepsilon for any 0 displaystyle varepsilon 0 so may be considered as a polynomial with some bigger order related asymptotic notations big o is the most commonly used asymptotic notation for comparing functions together with some other related notations it forms the family of bachmannlandau notations littleo notation little o redirects here for the baseball player see omar vizquel intuitively the assertion fx is ogx read fx is littleo of gx means that gx grows much faster than fx let as before f be a real or complex valued function and g a real valued function both defined on some unbounded subset of the real positive numbers such that gx is strictly positive for all large enough values of x one writes f x o g x as x displaystyle fxogxtext as xto infty if for every positive constant there exists a constant n such that f x g x for all x n displaystyle fxleq varepsilon gxqquad textfor all xgeq n for example one has 2 x o x 2 displaystyle 2xox2 and 1 x o 1 displaystyle 1xo1 the difference between the earlier definition for the bigo notation and the present definition of littleo is that while the former has to be true for at least one constant m the latter must hold for every positive constant however small in this way littleo notation makes a stronger statement than the corresponding bigo notation every function that is littleo of g is also bigo of g but not every function that is bigo of g is also littleo of g for example 2 x 2 o x 2 displaystyle 2x2ox2 but 2 x 2 o x 2 displaystyle 2x2neq ox2 as gx is nonzero or at least becomes nonzero beyond a certain point the relation fxogx is equivalent to lim x f x g x 0 displaystyle lim xto infty frac fxgx0 and this is in fact how landau originally defined the littleo notation littleo respects a number of arithmetic operations for example if c is a nonzero constant and f o g displaystyle fog then c f o g displaystyle ccdot fog and if f o f displaystyle fof and g o g displaystyle gog then f g o f g displaystyle fcdot gofcdot g it also satisfies a transitivity relation if f o g displaystyle fog and g o h displaystyle goh then f o h displaystyle foh big omega notation there are two very widespread and incompatible definitions of the statement f x g x x a displaystyle fxomega gx xrightarrow a where a is some real number or where f and g are real functions defined in a neighbourhood of a and where g is positive in this neighbourhood the first one chronologically is used in analytic number theory and the other one in computational complexity theory when the two subjects meet this situation is bound to generate confusion the hardylittlewood definition in 1914 godfrey harold hardy and john edensor littlewood introduced the new symbol displaystyle omega which is defined as follows f x g x x limsup x f x g x 0 displaystyle fxomega gx xrightarrow infty leftrightarrow limsup xto infty leftfrac fxgxright0 thus f x g x displaystyle fxomega gx is the negation of f x o g x displaystyle fxogx in 1916 the same authors introduced the two new symbols r displaystyle omega r and l displaystyle omega l thus defined f x r g x x limsup x f x g x 0 displaystyle fxomega rgx xrightarrow infty leftrightarrow limsup xto infty frac fxgx0 f x l g x x liminf x f x g x 0 displaystyle fxomega lgx xrightarrow infty leftrightarrow liminf xto infty frac fxgx0 although donald knuth wrote otherwise these hardylittlewood symbols are prototypes which after landau were never used again exactly thus r displaystyle omega r became displaystyle omega and l displaystyle omega l became displaystyle omega these three symbols displaystyle omega omega omega as well as f x g x displaystyle fxomega pm gx meaning that f x g x displaystyle fxomega gx and f x g x displaystyle fxomega gx are both satisfied are now currently used in analytic number theory simple examples we have sin x 1 x displaystyle sin xomega 1 xrightarrow infty and more precisely sin x 1 x displaystyle sin xomega pm 1 xrightarrow infty we have sin x 1 1 x displaystyle sin x1omega 1 xrightarrow infty and more precisely sin x 1 1 x displaystyle sin x1omega 1 xrightarrow infty however sin x 1 1 x displaystyle sin x1not omega 1 xrightarrow infty the knuth definition in 1976 donald knuth published a paper to justify his use of the displaystyle omega symbol to describe a stronger property knuth wrote for all the applications i have seen so far in computer science a stronger requirement is much more appropriate he defined f x g x g x o f x displaystyle fxomega gxleftrightarrow gxofx with the comment although i have changed hardy and littlewoods definition of displaystyle omega i feel justified in doing so because their definition is by no means in wide use and because there are other ways to say what they want to say in the comparatively rare cases when their definition applies family of bachmannlandau notations notation name description formal definition limit definition f n o g n displaystyle fnogn small o small oh f is dominated by g asymptotically k 0 n 0 n n 0 f n k g n displaystyle forall k0exists n0forall nn0fnkcdot gn lim n f n g n 0 displaystyle lim nto infty frac fngn0 f n o g n displaystyle fnogn big o big oh big omicron f displaystyle f is bounded above by g up to constant factor asymptotically k 0 n 0 n n 0 f n k g n displaystyle exists k0exists n0forall nn0fnleq kcdot gn limsup n f n g n displaystyle limsup nto infty frac leftfnrightgninfty f n g n displaystyle fntheta gn big theta f is bounded both above and below by g asymptotically k 1 0 k 2 0 n 0 n n 0 displaystyle exists k10exists k20exists n0forall nn0 k 1 g n f n k 2 g n displaystyle k1cdot gnleq fnleq k2cdot gn f n o g n displaystyle fnogn and f n g n displaystyle fnomega gn knuth version f n g n displaystyle fnsim gn on the order of f is equal to g asymptotically 0 n 0 n n 0 f n g n 1 displaystyle forall varepsilon 0exists n0forall nn0leftfn over gn1rightvarepsilon lim n f n g n 1 displaystyle lim nto infty fn over gn1 f n g n displaystyle fnomega gn big omega in number theory hardylittlewood f displaystyle f is not dominated by g asymptotically k 0 n 0 n n 0 f n k g n displaystyle exists k0forall n0exists nn0fngeq kcdot gn limsup n f n g n 0 displaystyle limsup nto infty leftfrac fngnright0 f n g n displaystyle fnomega gn big omega in complexity theory knuth f is bounded below by g asymptotically k 0 n 0 n n 0 f n k g n displaystyle exists k0exists n0forall nn0fngeq kcdot gn liminf n f n g n 0 displaystyle liminf nto infty frac fngn0 f n g n displaystyle fnomega gn small omega f dominates g asymptotically k 0 n 0 n n 0 f n k g n displaystyle forall k0exists n0forall nn0 fnkcdot gn lim n f n g n displaystyle lim nto infty leftfrac fngnrightinfty the limit definitions assume g n 0 displaystyle gnneq 0 for sufficiently large n the table is partly sorted from smallest to largest in the sense that o o knuths version of on functions correspond to on the real line the hardylittlewood version of however doesnt correspond to any such description computer science uses the big o big theta little o little omega and knuths big omega notations analytic number theory often uses the big o small o hardylittlewoods big omega with or without the or subscripts and displaystyle sim notations use in computer science further information analysis of algorithms informally especially in computer science the big o notation often is permitted to be somewhat abused to describe an asymptotic tight bound where using big theta notation might be more factually appropriate in a given context for example when considering a function tn 73n3 22n2 58 all of the following are generally acceptable but tighter bounds ie numbers 2 and 3 below are usually strongly preferred over looser bounds ie number 1 below tnon100 tnon3 tnn3 the equivalent english statements are respectively tn grows asymptotically no faster than n100 tn grows asymptotically no faster than n3 tn grows asymptotically as fast as n3 so while all three statements are true progressively more information is contained in each in some fields however the big o notation number 2 in the lists above would be used more commonly than the big theta notation bullets number 3 in the lists above for example if tn represents the running time of a newly developed algorithm for input size n the inventors and users of the algorithm might be more inclined to put an upper asymptotic bound on how long it will take to run without making an explicit statement about the lower asymptotic bound other notation in their book introduction to algorithms cormen leiserson rivest and stein consider the set of functions f which satisfy f n o g n n displaystyle fnogn nrightarrow infty in a correct notation this set can for instance be called og where o g f displaystyle ogf there exist positive constants c and n 0 displaystyle n0 such that 0 f n c g n displaystyle 0leq fnleq cgn for all n n 0 displaystyle ngeq n0 the authors state that the use of equality operator to denote set membership rather than the set membership operator is an abuse of notation but that doing so has advantages 2 n 2 3 n 1 2 n 2 o n displaystyle 2n23n12n2on extensions to the bachmannlandau notations another notation sometimes used in computer science is read softo fngn is shorthand for fnognlogkgn for some k essentially it is big o notation ignoring logarithmic factors because the growthrate effects of some other superlogarithmic function indicate a growthrate explosion for largesized input parameters that is more important to predicting bad runtime performance than the finerpoint effects contributed by the logarithmicgrowth factors this notation is often used to obviate the nitpicking within growthrates that are stated as too tightly bounded for the matters at hand since logkn is always on for any constant k and any 0 also the l notation defined as l n c e c o 1 ln n ln ln n 1 displaystyle lneco1ln nalpha ln ln n1alpha is convenient for functions that are between polynomial and exponential in terms of ln n displaystyle ln n generalizations and related usages the generalization to functions taking values in any normed vector space is straightforward replacing absolute values by norms where f and g need not take their values in the same space a generalization to functions g taking values in any topological group is also possible the limiting process xxo can also be generalized by introducing an arbitrary filter base ie to directed nets f andg the o notation can be used to define derivatives and differentiability in quite general spaces and also asymptotical equivalence of functions f g f g o g displaystyle fsim giff fgin og which is an equivalence relation and a more restrictive notion than the relationship f is g from above it reduces to lim f g 1 if f and g are positive real valued functions for example 2x is x but 2xx is not ox history bachmannlandau hardy and vinogradov notations the symbol o was first introduced by number theorist paul bachmann in 1894 in the second volume of his book analytische zahlentheorie analytic number theory the first volume of which not yet containing big o notation was published in 1892 the symbol displaystyle omega in the sense is not an o of was introduced in 1914 by hardy and littlewood hardy and littlewood also introduced in 1918 the symbols r displaystyle omega r right and l displaystyle omega l left precursors of the modern symbols displaystyle omega is not smaller than a small o of and displaystyle omega is not larger than a small o of thus the omega symbols with their original meanings are sometimes also referred to as landau symbols this notation displaystyle omega became commonly used in number theory at least since the 1950s in the 1970s the big o was popularized in computer science by donald knuth who introduced the related theta notation and proposed a different definition for the omega notation landau never used the big theta and small omega symbols hardys symbols were in terms of the modern o notation f g f o g displaystyle fpreccurlyeq giff fin og and f g f o g displaystyle fprec giff fin og hardy however never defined or used the notation displaystyle prec prec nor displaystyle ll as it has been sometimes reported it should also be noted that hardy introduces the symbols displaystyle preccurlyeq and displaystyle prec as well as some other symbols in his 1910 tract orders of infinity and makes use of it only in three papers 19101913 in his nearly 400 remaining papers and books he consistently uses the landau symbols o and o hardys notation is not used anymore on the other hand in the 1930s the russian number theorist ivan matveyevich vinogradov introduced his notation displaystyle ll which has been increasingly used in number theory instead of the o displaystyle o notation we have f g f o g displaystyle fll giff fin og and frequently both notations are used in the same paper the bigo originally stands for order of ordnung bachmann 1894 and is thus a latin letter neither bachmann nor landau ever call it omicron the symbol was much later on 1976 viewed by knuth as a capital omicron probably in reference to his definition of the symbol omega the digit zero should not be used asymptotic expansion approximation of functions generalizing taylors formula asymptotically optimal algorithm a phrase frequently used to describe an algorithm that has an upper bound asymptotically within a constant of a lower bound for the problem big o in probability notation opop limit superior and limit inferior an explanation of some of the limit notation used in this article nachbins theorem a precise method of bounding complex analytic functions so that the domain of convergence of integral transforms can be stated orders of approximation references and notes hardy g h 1910 orders of infinity the infinitrcalcl of paul du boisreymond cambridge university press knuth donald 1997 1211 asymptotic representations fundamental algorithms the art of computer programming 1 3rd ed addisonwesley isbn0201896834 cormen thomas h leiserson charles e rivest ronald l stein clifford 2001 31 asymptotic notation introduction to algorithms 2nd ed mit press and mcgrawhill isbn0262032937 sipser michael 1997 introduction to the theory of computation pws publishing pp226228 isbn053494728x avigad jeremy donnelly kevin 2004 formalizing o notation in isabellehol pdf international joint conference on automated reasoning doi101007978354025984827 black paul e 11 march 2005 black paul e ed bigo notation dictionary of algorithms and data structures us national institute of standards and technology retrieved december 16 2006 black paul e 17 december 2004 black paul e ed littleo notation dictionary of algorithms and data structures us national institute of standards and technology retrieved december 16 2006 black paul e 17 december 2004 black paul e ed dictionary of algorithms and data structures us national institute of standards and technology retrieved december 16 2006 black paul e 17 december 2004 black paul e ed dictionary of algorithms and data structures us national institute of standards and technology retrieved december 16 2006 black paul e 17 december 2004 black paul e ed dictionary of algorithms and data structures us national institute of standards and technology retrieved december 16 2006 the wikibook data structures has a page on the topic of bigo notation growth of sequences oeis online encyclopedia of integer sequences wiki introduction to asymptotic notations landau symbols bigo notation what is it good for big o notation explained in plain english an example of big o in accuracy of central divided difference scheme for first derivative 