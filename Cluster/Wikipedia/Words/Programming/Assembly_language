assembly language an assembly or assembler language each assembly language is specific to a particular computer architecture and operating system assembly language usually has one statement per machine instruction but assembler directives and symbolic labels of program and memory locations are often also supported assembly code is converted into executable machine code by a utility program referred to as an assembler the conversion process is referred to as assembly or assembling the source code assembler language syntax assembly language uses a mnemonic to represent each lowlevel machine instruction or opcode typically also each architectural register flag etc many operations require one or more operands in order to form a complete instruction most assemblers permit named constants registers and labels for program and memory locations and can calculate expressions for operands thus the programmers are freed from tedious repetitive calculations and assembler programs are much more readable than machine code depending on the architecture these elements may also be combined for specific instructions or addressing modes using offsets or other data as well as fixed addresses many assemblers offer additional mechanisms to facilitate program development to control the assembly process and to aid debugging terminology a macro assembler includes a macroinstruction facility so that parameterized assembly language text can be represented by a name and that name can be used to insert the expanded text into other code a cross assembler see also cross compiler is an assembler that is run on a computer or operating system the host system of a different type from the system on which the resulting code is to run the target system crossassembling facilitates the development of programs for systems that do not have the resources to support software development such as an embedded system in such a case the resulting object code must be transferred to the target system either via readonly memory rom eprom etc or a data link using an exact bitbybit copy of the object code or a textbased representation of that code such as motorola srecord or intel hex a highlevel assembler is a program that provides language abstractions more often associated with highlevel languages such as advanced control structures ifthenelse do case etc and highlevel abstract data types including structuresrecords unions classes and sets a microassembler is a program that helps prepare a microprogram called firmware to control the low level operation of a computer a metaassembler is a term used in some circles for a program that accepts the syntactic and semantic description of an assembly language and generates an assembler for that language assembly time is the computational step where an assembler is run key concepts assembler an assembler program creates object code by translating combinations of mnemonics and syntax for operations and addressing modes into their numerical equivalents this representation typically includes an operation code opcode as well as other control bits and data the assembler also calculates constant expressions and resolves symbolic names for memory locations and other entities the use of symbolic references is a key feature of assemblers saving tedious calculations and manual address updates after program modifications most assemblers also include macro facilities for performing textual substitution eg to generate common short sequences of instructions as inline instead of called subroutines some assemblers may also be able to perform some simple types of instruction setspecific optimizations one concrete example of this may be the ubiquitous x86 assemblers from various vendors most of them are able to perform jumpinstruction replacements long jumps replaced by short or relative jumps in any number of passes on request others may even do simple rearrangement or insertion of instructions such as some assemblers for risc architectures that can help optimize a sensible instruction scheduling to exploit the cpu pipeline as efficiently as possible like early programming languages such as fortran algol cobol and lisp assemblers have been available since the 1950s and the first generations of text based computer interfaces however assemblers came first as they are far simpler to write than compilers for highlevel languages this is because each mnemonic along with the addressing modes and operands of an instruction translates rather directly into the numeric representations of that particular instruction without much context or analysis there have also been several classes of translators and semi automatic code generators with properties similar to both assembly and high level languages with speedcode as perhaps one of the better known examples there may be several assemblers with different syntax for a particular cpu or instruction set architecture for instance an instruction to add memory data to a register in a x86family processor might be add eax in original intel syntax whereas this would be written addl ebxeax in the att syntax used by the gnu assembler despite different appearances different syntactic forms generally generate the same numeric machine code see further below a single assembler may also have different modes in order to support variations in syntactic forms as well as their exact semantic interpretations such as fasmsyntax tasmsyntax ideal mode etc in the special case of x86 assembly programming number of passes there are two types of assemblers based on how many passes through the source are needed how many times the assembler reads the source to produce the object file onepass assemblers go through the source code once any symbol used before it is defined will require errata at the end of the object code or at least no earlier than the point where the symbol is defined telling the linker or the loader to go back and overwrite a placeholder which had been left where the as yet undefined symbol was used multipass assemblers create a table with all symbols and their values in the first passes then use the table in later passes to generate code in both cases the assembler must be able to determine the size of each instruction on the initial passes in order to calculate the addresses of subsequent symbols this means that if the size of an operation referring to an operand defined later depends on the type or distance of the operand the assembler will make a pessimistic estimate when first encountering the operation and if necessary pad it with one or more nooperation instructions in a later pass or the errata in an assembler with peephole optimization addresses may be recalculated between passes to allow replacing pessimistic code with code tailored to the exact distance from the target the original reason for the use of onepass assemblers was speed of assembly often a second pass would require rewinding and rereading the program source on tape or rereading a deck of cards or punched paper tape later computers with much larger memories especially disc storage had the space to perform all necessary processing without such rereading the advantage of the multipass assembler is that the absence of errata makes the linking process or the program load if the assembler directly produces executable code faster example in the following code snippet a onepass assembler would be able to determine the address of the backward reference bkwd when assembling statement s2 but would not be able to determine the address of the forward reference fwd when assembling the branch statement s1 indeed fwd may be undefined a twopass assembler would determine both addresses in pass 1 so they would be known when generating code in pass 2 s1 b fwd fwd equ bkwd equ s2 b bkwd highlevel assemblers more sophisticated highlevel assemblers provide language abstractions such as highlevel procedurefunction declarations and invocations advanced control structures ifthenelse switch highlevel abstract data types including structuresrecords unions classes and sets sophisticated macro processing although available on ordinary assemblers since the late 1950s for ibm 700 series and since the 1960s for ibm360 amongst other machines objectoriented programming features such as classes objects abstraction polymorphism and inheritance see language design below for more details assembly language a program written in assembly language consists of a series of mnemonic processor instructions and metastatements known variously as directives pseudoinstructions and pseudoops comments and data assembly language instructions usually consist of an opcode mnemonic followed by a list of data arguments or parameters these are translated by an assembler into machine language instructions that can be loaded into memory and executed for example the instruction below tells an x86ia32 processor to move an immediate 8bit value into a register the binary code for this instruction is 10110 followed by a 3bit identifier for which register to use the identifier for the al register is 000 so the following machine code loads the al register with the data 01100001 10110000 01100001 this binary computer code can be made more humanreadable by expressing it in hexadecimal as follows b0 61 here b0 means move a copy of the following value into al and 61 is a hexadecimal representation of the value 01100001 which is 97 in decimal assembly language for the 8086 family provides the mnemonic mov an abbreviation of move for instructions such as this so the machine code above can be written as follows in assembly language complete with an explanatory comment if required after the semicolon this is much easier to read and to remember mov al 61h load al with 97 decimal 61 hex in some assembly languages the same mnemonic such as mov may be used for a family of related instructions for loading copying and moving data whether these are immediate values values in registers or memory locations pointed to by values in registers other assemblers may use separate opcode mnemonics such as l for move memory to register st for move register to memory lr for move register to register mvi for move immediate operand to memory etc the x86 opcode 10110000 b0 copies an 8bit value into the al register while 10110001 b1 moves it into cl and 10110010 b2 does so into dl assembly language examples for these follow mov al 1h load al with immediate value 1 mov cl 2h load cl with immediate value 2 mov dl 3h load dl with immediate value 3 the syntax of mov can also be more complex as the following examples show mov eax move the 4 bytes in memory at the address contained in ebx into eax mov cl move the contents of cl into the byte at address esieax in each case the mov mnemonic is translated directly into an opcode in the ranges 888e a0a3 b0b8 c6 or c7 by an assembler and the programmer does not have to know or remember which transforming assembly language into machine code is the job of an assembler and the reverse can at least partially be achieved by a disassembler unlike highlevel languages there is a onetoone correspondence between many simple assembly statements and machine language instructions however in some cases an assembler may provide pseudoinstructions essentially macros which expand into several machine language instructions to provide commonly needed functionality for example for a machine that lacks a branch if greater or equal instruction an assembler may provide a pseudoinstruction that expands to the machines set if less than and branch if zero on the result of the set instruction most fullfeatured assemblers also provide a rich macro language discussed below which is used by vendors and programmers to generate more complex code and data sequences each computer architecture has its own machine language computers differ in the number and type of operations they support in the different sizes and numbers of registers and in the representations of data in storage while most generalpurpose computers are able to carry out essentially the same functionality the ways they do so differ the corresponding assembly languages reflect these differences multiple sets of mnemonics or assemblylanguage syntax may exist for a single instruction set typically instantiated in different assembler programs in these cases the most popular one is usually that supplied by the manufacturer and used in its documentation language design basic elements there is a large degree of diversity in the way the authors of assemblers categorize statements and in the nomenclature that they use in particular some describe anything other than a machine mnemonic or extended mnemonic as a pseudooperation pseudoop a typical assembly language consists of 3 types of instruction statements that are used to define program operations opcode mnemonics data definitions assembly directives opcode mnemonics and extended mnemonics instructions statements in assembly language are generally very simple unlike those in highlevel languages generally a mnemonic is a symbolic name for a single executable machine language instruction an opcode and there is at least one opcode mnemonic defined for each machine language instruction each instruction typically consists of an operation or opcode plus zero or more operands most instructions refer to a single value or a pair of values operands can be immediate value coded in the instruction itself registers specified in the instruction or implied or the addresses of data located elsewhere in storage this is determined by the underlying processor architecture the assembler merely reflects how this architecture works extended mnemonics are often used to specify a combination of an opcode with a specific operand eg the system360 assemblers use b as an extended mnemonic for bc with a mask of 15 and nop no operation do nothing for one step for bc with a mask of 0 extended mnemonics are often used to support specialized uses of instructions often for purposes not obvious from the instruction name for example many cpus do not have an explicit nop instruction but do have instructions that can be used for the purpose in 8086 cpus the instruction xchg axax is used for nop with nop being a pseudoopcode to encode the instruction xchg axax some disassemblers recognize this and will decode the xchg axax instruction as nop similarly ibm assemblers for system360 and system370 use the extended mnemonics nop and nopr for bc and bcr with zero masks for the sparc architecture these are known as synthetic instructions some assemblers also support simple builtin macroinstructions that generate two or more machine instructions for instance with some z80 assemblers the instruction ld hlbc is recognized to generate ld lc followed by ld hb these are sometimes known as pseudoopcodes mnemonics are arbitrary symbols in 1985 the ieee published standard 694 for a uniform set of mnemonics to be used by all assemblers the standard has since been withdrawn data directives there are instructions used to define data elements to hold data and variables they define the type of data the length and the alignment of data these instructions can also define whether the data is available to outside programs programs assembled separately or only to the program in which the data section is defined some assemblers classify these as pseudoops assembly directives assembly directives also called pseudoopcodes pseudooperations or pseudoops are commands given to an assembler directing it to perform operations other than assembling instructions the names of pseudoops often start with a dot to distinguish them from machine instructions pseudoops can make the assembly of the program dependent on parameters input by a programmer so that one program can be assembled different ways perhaps for different applications or a pseudoop can be used to manipulate presentation of a program to make it easier to read and maintain another common use of pseudoops is to reserve storage areas for runtime data and optionally initialize their contents to known values symbolic assemblers let programmers associate arbitrary names labels or symbols with memory locations and various constants usually every constant and variable is given a name so instructions can reference those locations by name thus promoting selfdocumenting code in executable code the name of each subroutine is associated with its entry point so any calls to a subroutine can use its name inside subroutines goto destinations are given labels some assemblers support local symbols which are lexically distinct from normal symbols eg the use of 10 as a goto destination some assemblers such as nasm provide flexible symbol management letting programmers manage different namespaces automatically calculate offsets within data structures and assign labels that refer to literal values or the result of simple computations performed by the assembler labels can also be used to initialize constants and variables with relocatable addresses assembly languages like most other computer languages allow comments to be added to program source code that will be ignored during assembly judicious commenting is essential in assembly language programs as the meaning and purpose of a sequence of binary machine instructions can be difficult to determine the raw uncommented assembly language generated by compilers or disassemblers is quite difficult to read when changes must be made macros many assemblers support predefined macros and others support programmerdefined and repeatedly redefinable macros involving sequences of text lines in which variables and constants are embedded the macro definition is most commonly in assembly language the term macro represents a more comprehensive concept than it does in some other contexts such as in the c programming language where its define directive typically is used to create short single line macros assembler macro instructions like macros in pli and some other languages can be lengthy programs by themselves executed by interpretation by the assembler during assembly since macros can have short names but expand to several or indeed many lines of code they can be used to make assembly language programs appear to be far shorter requiring fewer lines of source code as with higher level languages they can also be used to add higher levels of structure to assembly programs optionally introduce embedded debugging code via parameters and other similar features macro assemblers often allow macros to take parameters some assemblers include quite sophisticated macro languages incorporating such highlevel language elements as optional parameters symbolic variables conditionals string manipulation and arithmetic operations all usable during the execution of a given macro and allowing macros to save context or exchange information thus a macro might generate numerous assembly language instructions or data definitions based on the macro arguments this could be used to generate recordstyle data structures or unrolled loops for example or could generate entire algorithms based on complex parameters for instance a sort macro could accept the specification of a complex sort key and generate code crafted for that specific key not needing the runtime tests that would be required for a general procedure interpreting the specification an organization using assembly language that has been heavily extended using such a macro suite can be considered to be working in a higherlevel language since such programmers are not working with a computers lowestlevel conceptual elements underlining this point macros were used to implement an early virtual machine in snobol4 1967 which was written in the snobol implementation language sil an assembly language for a virtual machine the target machine would translate this to its native code using a macro assembler this allowed a high degree of portability for the time macros were used to customize large scale software systems for specific customers in the mainframe era and were also used by customer personnel to satisfy their employers needs by making specific versions of manufacturer operating systems this was done for example by systems programmers working with ibms conversational monitor system virtual machine vmcms and with ibms real time transaction processing addons customer information control system cics and acptpf the airlinefinancial system that began in the 1970s and still runs many large computer reservation systems crs and credit card systems today it is also possible to use solely the macro processing abilities of an assembler to generate code written in completely different languages for example to generate a version of a program in cobol using a pure macro assembler program containing lines of cobol code inside assembly time operators instructing the assembler to generate arbitrary code ibm os360 uses macros to perform system generation the user specifies options by coding a series of assembler macros assembling these macros generates a job stream to build the system including job control language and utility control statements this is because as was realized in the 1960s the concept of macro processing is independent of the concept of assembly the former being in modern terms more word processing text processing than generating object code the concept of macro processing appeared and appears in the c programming language which supports preprocessor instructions to set variables and make conditional tests on their values note that unlike certain previous macro processors inside assemblers the c preprocessor is not turingcomplete because it lacks the ability to either loop or go to the latter allowing programs to loop despite the power of macro processing it fell into disuse in many high level languages major exceptions being c c and pli while remaining a perennial for assemblers macro parameter substitution is strictly by name at macro processing time the value of a parameter is textually substituted for its name the most famous class of bugs resulting was the use of a parameter that itself was an expression and not a simple name when the macro writer expected a name in the macro foo macro a load ab the intention was that the caller would provide the name of a variable and the global variable or constant b would be used to multiply a if foo is called with the parameter ac the macro expansion of load acb occurs to avoid any possible ambiguity users of macro processors can parenthesize formal parameters inside macro definitions or callers can parenthesize the input parameters support for structured programming some assemblers have incorporated structured programming elements to encode execution flow the earliest example of this approach was in the concept14 macro set originally proposed by dr harlan mills march 1970 and implemented by marvin kessler at ibms federal systems division which extended the s360 macro assembler with ifelseendif and similar control flow blocks this was a way to reduce or eliminate the use of goto operations in assembly code one of the main factors causing spaghetti code in assembly language this approach was widely accepted in the early 80s the latter days of largescale assembly language use a curious design was anatural a streamoriented assembler for 8080z80 processors from whitesmiths ltd developers of the unixlike idris operating system and what was reported to be the first commercial c compiler the language was classified as an assembler because it worked with raw machine elements such as opcodes registers and memory references but it incorporated an expression syntax to indicate execution order parentheses and other special symbols along with blockoriented structured programming constructs controlled the sequence of the generated instructions anatural was built as the object language of a c compiler rather than for handcoding but its logical syntax won some fans there has been little apparent demand for more sophisticated assemblers since the decline of largescale assembly language development assemblers with a strong macro engine allow structured programming via macros such as the switch macro provided with the masm32 package note this code is a complete program include masm32includemasm32rtinc use the masm32 library code demomain repeat 20 switch rvnrandom 9 generate a number between 0 and 8 mov ecx 7 case 0 print case 0 case ecx in contrast to most other programming languages print case 7 the masm32 switch allows variable cases case 1 3 if eax1 print case 1 elseif eax2 print case 2 else print cases 1 to 3 other endif case 4 6 8 print cases 4 6 or 8 default mov ebx 19 print 20 stars repeat print dec ebx until sign loop until the sign flag is set endsw print chr13 10 endm exit end demomain use of assembly language historical perspective assembly languages date to the introduction of the storedprogram computer the first assembly language was developed in 1947 by kathleen booth for the arc2 at birkbeck university of london following work with john von neumann and herman goldstine at the institute for advanced study assembly languages eliminate much of the errorprone tedious and timeconsuming firstgeneration programming needed with the earliest computers freeing programmers from tedium such as remembering numeric codes and calculating addresses they were once widely used for all sorts of programming however by the 1980s 1990s on microcomputers their use had largely been supplanted by higherlevel languages in the search for improved programming productivity today assembly language is still used for direct hardware manipulation access to specialized processor instructions or to address critical performance issues typical uses are device drivers lowlevel embedded systems and realtime systems historically numerous programs have been written entirely in assembly language the burroughs mcp 1961 was the first computer for which an operating system was not developed entirely in assembly language it was written in executive systems problem oriented language espol an algol dialect many commercial applications were written in assembly language as well including a large amount of the ibm mainframe software written by large corporations cobol fortran and some pli eventually displaced much of this work although a number of large organizations retained assemblylanguage application infrastructures well into the 1990s most early microcomputers relied on handcoded assembly language including most operating systems and large applications this was because these systems had severe resource constraints imposed idiosyncratic memory and display architectures and provided limited buggy system services perhaps more important was the lack of firstclass highlevel language compilers suitable for microcomputer use a psychological factor may have also played a role the first generation of microcomputer programmers retained a hobbyist wires and pliers attitude in a more commercial context the biggest reasons for using assembly language were minimal bloat size minimal overhead greater speed and reliability typical examples of large assembly language programs from this time are ibm pc dos operating systems the turbo pascal compiler and early applications such as the spreadsheet program lotus 123 according to some the 1993 arcade game nba jam is another example assembly language has long been the primary development language for many popular home computers of the 1980s and 1990s such as the msx sinclair zx spectrum commodore 64 commodore amiga and atari st this was in large part because interpreted basic dialects on these systems offered insufficient execution speed as well as insufficient facilities to take full advantage of the available hardware on these systems some systems even have an integrated development environment ide with highly advanced debugging and macro facilities some compilers available for the radio shack trs80 and its successors had the capability to combine inline assembly source with highlevel program statements upon compilation a builtin assembler produced inline machine code current usage there have always been debates over the usefulness and performance of assembly language relative to highlevel languages assembly language has specific niche uses where it is important see below as of july2017 with delays caused by predictable bottlenecks such as cache misses io operations and paging this has made raw code execution speed a nonissue for many programmers there are some situations in which developers might choose to use assembly language a standalone executable of compact size is required that must execute without recourse to the runtime components or libraries associated with a highlevel language this is perhaps the most common situation for example firmware for telephones automobile fuel and ignition systems airconditioning control systems security systems and sensors code that must interact directly with the hardware for example in device drivers and interrupt handlers in an embedded processor or dsp highrepetition interrupts require the shortest number of cycles per interrupt such as an interrupt that occurs 1000 or 10000 times a second programs that need to use processorspecific instructions not implemented in a compiler a common example is the bitwise rotation instruction at the core of many encryption algorithms as well as querying the parity of a byte or the 4bit carry of an addition programs that create vectorized functions for programs in higherlevel languages such as c in the higherlevel language this is sometimes aided by compiler intrinsic functions which map directly to simd mnemonics but nevertheless result in a onetoone assembly conversion specific for the given vector processor programs requiring extreme optimization for example an inner loop in a processorintensive algorithm game programmers take advantage of the abilities of hardware features in systems enabling games to run faster also large scientific simulations require highly optimized algorithms eg linear algebra with blas situations where no highlevel language exists on a new or specialized processor for example programs that need precise timing such as realtime programs such as simulations flight navigation systems and medical equipment for example in a flybywire system telemetry must be interpreted and acted upon within strict time constraints such systems must eliminate sources of unpredictable delays which may be created by some interpreted languages automatic garbage collection paging operations or preemptive multitasking however some higherlevel languages incorporate runtime components and operating system interfaces that can introduce such delays choosing assembly or lower level languages for such systems gives programmers greater visibility and control over processing details cryptographic algorithms that must always take strictly the same time to execute preventing timing attacks modify and extend legacy code written for ibm mainframe computers situations where complete control over the environment is required in extremely high security situations where nothing can be taken for granted computer viruses bootloaders certain device drivers or other items very close to the hardware or lowlevel operating system instruction set simulators for monitoring tracing and debugging where additional overhead is kept to a minimum reverseengineering and modifying program files such as existing binaries that may or may not have originally been written in a highlevel language for example when trying to recreate programs for which source code is not available or has been lost or cracking copy protection of proprietary software video games also termed rom hacking which is possible via several methods the most widely employed method is altering program code at the assembly language level selfmodifying code to which assembly language lends itself well games and other software for graphing calculators assembly language is still taught in most computer science and electronic engineering programs although few programmers today regularly work with assembly language as a tool the underlying concepts remain very important such fundamental topics as binary arithmetic memory allocation stack processing character set encoding interrupt processing and compiler design would be hard to study in detail without a grasp of how a computer operates at the hardware level since a computers behavior is fundamentally defined by its instruction set the logical way to learn such concepts is to study an assembly language most modern computers have similar instruction sets therefore studying a single assembly language is sufficient to learn i the basic concepts ii to recognize situations where the use of assembly language might be appropriate and iii to see how efficient executable code can be created from highlevel languages this is analogous to children needing to learn the basic arithmetic operations eg long division although calculators are widely used for all except the most trivial calculations typical applications assembly language is typically used in a systems boot code the lowlevel code that initializes and tests the system hardware prior to booting the operating system and is often stored in rom bios on ibmcompatible pc systems and cpm is an example some compilers translate highlevel languages into assembly first before fully compiling allowing the assembly code to be viewed for debugging and optimization purposes some compilers for relatively lowlevel languages such as pascal or c allow the programmer to embed assembly language directly in the source code programs using such facilities can then construct abstractions using different assembly language on each hardware platform the systems portable code can then use these processorspecific components through a uniform interface assembly language is useful in reverse engineering many programs are distributed only in machine code form which is straightforward to translate into assembly language but more difficult to translate into a higherlevel language tools such as the interactive disassembler make extensive use of disassembly for such a purpose this technique is used by hackers to crack commercial software and competitors to produce software with similar results from competing companies assembly language is used to enhance speed of execution especially in early personal computers with limited processing power and ram assemblers can be used to generate blocks of data with no highlevel language overhead from formatted and commented source code to be used by other code computer programming portal computer science portal compiler comparison of assemblers disassembler data segment hexadecimal nibble high level assembly instruction set spaghetti code little man computer an educational computer model with a base10 assembly language typed assembly language webassembly notes asm community book an online book full of helpful asm info tutorials and code examples by the asm community archived at the internet archive jonathan bartlett programming from the ground up bartlett publishing 2004 isbn0975283847also available online as pdf robert britton mips assembly language programming prentice hall 2003 isbn0131420445 jeff duntemann assembly language stepbystep wiley 2000 isbn0471375233 randall hyde the art of assembly language no starch press 2003 isbn1886411972draft versions available online as pdf and html charles w kann introduction to mips assembly language programming 2015 peter norton john socha peter nortons assembly language book for the ibm pc brady books ny 1986 michael singer pdp11 assembler language programming and machine organization john wiley sons ny 1980 dominic sweetman see mips run morgan kaufmann publishers 1999 isbn1558604103 john waldron introduction to risc assembly language programming addison wesley 1998 isbn0201398281 assembly languageat wikipedias sister projects definitions from wiktionary media from wikimedia commons news from wikinews textbooks from wikibooks resources from wikiversity assembly language at curlie unix assembly language programming linux assembly ppr learning assembly language nasm the netwide assembler a popular assembly language assembly language programming examples authoring windows applications in assembly language assembly optimization tips by mark larson the art of assembly language by randall hyde the table for assembly language to machine code vtetypes of programming languages actorbased array aspectoriented classbased concatenative concurrent dataflow declarative domainspecific dynamic esoteric eventdriven extensible functional imperative logic macro metaprogramming multiparadigm objectbased objectoriented pipeline procedural prototypebased reflective rulebased scripting stack based synchronous templating assembly compiled interpreted machine lowlevel highlevel very highlevel first generation second generation third generation fourth generation fifth generation nonenglishbased visual vteprogramming languages comparison timeline history apl assembly basic c c c cobol fortran go groovy haskell java javascript js kotlin lisp lua objectivec pascal perl php python ruby rust shell smalltalk swift visual basic net vbnet more category lists alphabetical categorical generational nonenglishbased vteembedded systemsgeneral terms embedded software original equipment manufacturer oem embedded database embedded hypervisor consumer electronics microcontroller asic fpga soc memory footprint singleboard computer raspberry pi iot board support package cross compiler embedded os bootloader firmware and controls custom firmware rooting android ios jailbreaking playstation 3 jailbreak closed platform vendor lockin defective by design hacking of consumer electronics homebrew video games crippleware software libraries uclibc dietlibc embedded glibc musl development tools bitbake buildroot busybox yocto project almquist shell standalone shell openembedded operating systems linux on embedded systems linux for mobile devices lightweight linux distribution windows iot win ce realtime operating system programming languages ada assembly language capl embedded c misra c nesc embedded c embedded java lightweight browsers opensource computing hardware opensource robotics authority control bnf cb11961749m data gnd 40032553 lccn sh85008765 